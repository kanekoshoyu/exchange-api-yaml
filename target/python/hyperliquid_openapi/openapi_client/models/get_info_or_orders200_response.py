# coding: utf-8

"""
    Hyperliquid API

    Documentation for the Hyperliquid public API     ## **Rate limits** The following rate limits apply per IP address:   - All REST requests have a weight limit of 1200 per minute. All documented exchange API requests have a weight of 1. All documented info API requests have a weight of either 2 or 20; these limits can be found in the description for each info request in the Info endpoint section. All explorer API requests have a weight of 40.   - Maximum of 100 websocket connections   - Maximum of 1000 websocket subscriptions   - Maximum of 10 unique users across user-specific websocket subscriptions  - Maximum of 2000 inbound messages per minute across all websocket connections   - Use websockets for lowest latency realtime data. See the python SDK for a full-featured example.    ## **Address-based L1 Rate limits**    The L1 rate limiting logic will allow 1 requests per 1 USDC traded cumulatively since address inception.   Using an order value of 100 USDC, this only requires a fill rate of 1%.    Each address starts with an initial buffer of 10000 requests. When rate limited, an address will still be allowed one request every 10 seconds.  Cancels have cumulative limit min(limit + 100000, limit * 2) where limit is the default limit for other actions. This way, hitting the address-based rate limit will still allow open orders to be canceled.   Note that this rate limit only applies to L1 actions, not info requests.   ## **Batched Requests** A batched request with n orders (or cancels) is treated as one request for IP based rate limiting, but as n requests for address-based L1 rate limiting. 

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.candle_snapshot_response_inner_inner import CandleSnapshotResponseInnerInner
from openapi_client.models.clearinghouse_state_response import ClearinghouseStateResponse
from openapi_client.models.frontend_open_orders_response_inner import FrontendOpenOrdersResponseInner
from openapi_client.models.funding_history_response_inner import FundingHistoryResponseInner
from openapi_client.models.l2_book_response_inner_inner import L2BookResponseInnerInner
from openapi_client.models.market_data_response import MarketDataResponse
from openapi_client.models.meta_and_asset_ctxs_response import MetaAndAssetCtxsResponse
from openapi_client.models.meta_response import MetaResponse
from openapi_client.models.open_orders_response_inner import OpenOrdersResponseInner
from openapi_client.models.order_status_response import OrderStatusResponse
from openapi_client.models.spot_clearinghouse_state_response import SpotClearinghouseStateResponse
from openapi_client.models.spot_meta_and_asset_ctxs_response_inner import SpotMetaAndAssetCtxsResponseInner
from openapi_client.models.spot_meta_response import SpotMetaResponse
from openapi_client.models.user_fills_response_inner import UserFillsResponseInner
from openapi_client.models.user_funding_or_ledger_updates_response_inner import UserFundingOrLedgerUpdatesResponseInner
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

GETINFOORORDERS200RESPONSE_ONE_OF_SCHEMAS = ["ClearinghouseStateResponse", "List[FrontendOpenOrdersResponseInner]", "List[FundingHistoryResponseInner]", "List[List[CandleSnapshotResponseInnerInner]]", "List[List[L2BookResponseInnerInner]]", "List[OpenOrdersResponseInner]", "List[SpotMetaAndAssetCtxsResponseInner]", "List[UserFillsResponseInner]", "List[UserFundingOrLedgerUpdatesResponseInner]", "MarketDataResponse", "MetaAndAssetCtxsResponse", "MetaResponse", "OrderStatusResponse", "SpotClearinghouseStateResponse", "SpotMetaResponse"]

class GetInfoOrOrders200Response(BaseModel):
    """
    GetInfoOrOrders200Response
    """
    # data type: MarketDataResponse
    oneof_schema_1_validator: Optional[MarketDataResponse] = None
    # data type: List[OpenOrdersResponseInner]
    oneof_schema_2_validator: Optional[List[OpenOrdersResponseInner]] = None
    # data type: List[FrontendOpenOrdersResponseInner]
    oneof_schema_3_validator: Optional[List[FrontendOpenOrdersResponseInner]] = None
    # data type: List[UserFillsResponseInner]
    oneof_schema_4_validator: Optional[List[UserFillsResponseInner]] = None
    # data type: List[UserFillsResponseInner]
    oneof_schema_5_validator: Optional[List[UserFillsResponseInner]] = None
    # data type: OrderStatusResponse
    oneof_schema_6_validator: Optional[OrderStatusResponse] = None
    # data type: List[List[L2BookResponseInnerInner]]
    oneof_schema_7_validator: Optional[List[List[L2BookResponseInnerInner]]] = Field(default=None, description="Level 2 order book, with separate arrays for bid and ask sides.")
    # data type: List[List[CandleSnapshotResponseInnerInner]]
    oneof_schema_8_validator: Optional[List[List[CandleSnapshotResponseInnerInner]]] = Field(default=None, description="An array of candle snapshots for the specified parameters.")
    # data type: MetaResponse
    oneof_schema_9_validator: Optional[MetaResponse] = None
    # data type: MetaAndAssetCtxsResponse
    oneof_schema_10_validator: Optional[MetaAndAssetCtxsResponse] = None
    # data type: ClearinghouseStateResponse
    oneof_schema_11_validator: Optional[ClearinghouseStateResponse] = None
    # data type: List[UserFundingOrLedgerUpdatesResponseInner]
    oneof_schema_12_validator: Optional[List[UserFundingOrLedgerUpdatesResponseInner]] = Field(default=None, description="Array of ledger update entries.")
    # data type: List[FundingHistoryResponseInner]
    oneof_schema_13_validator: Optional[List[FundingHistoryResponseInner]] = Field(default=None, description="Array of funding history entries.")
    # data type: SpotMetaResponse
    oneof_schema_14_validator: Optional[SpotMetaResponse] = None
    # data type: List[SpotMetaAndAssetCtxsResponseInner]
    oneof_schema_15_validator: Optional[List[SpotMetaAndAssetCtxsResponseInner]] = Field(default=None, description="### Response Schema This response schema includes metadata about tokens and asset contexts, including trading pairs and market data. ")
    # data type: SpotClearinghouseStateResponse
    oneof_schema_16_validator: Optional[SpotClearinghouseStateResponse] = None
    actual_instance: Optional[Union[ClearinghouseStateResponse, List[FrontendOpenOrdersResponseInner], List[FundingHistoryResponseInner], List[List[CandleSnapshotResponseInnerInner]], List[List[L2BookResponseInnerInner]], List[OpenOrdersResponseInner], List[SpotMetaAndAssetCtxsResponseInner], List[UserFillsResponseInner], List[UserFundingOrLedgerUpdatesResponseInner], MarketDataResponse, MetaAndAssetCtxsResponse, MetaResponse, OrderStatusResponse, SpotClearinghouseStateResponse, SpotMetaResponse]] = None
    one_of_schemas: Set[str] = { "ClearinghouseStateResponse", "List[FrontendOpenOrdersResponseInner]", "List[FundingHistoryResponseInner]", "List[List[CandleSnapshotResponseInnerInner]]", "List[List[L2BookResponseInnerInner]]", "List[OpenOrdersResponseInner]", "List[SpotMetaAndAssetCtxsResponseInner]", "List[UserFillsResponseInner]", "List[UserFundingOrLedgerUpdatesResponseInner]", "MarketDataResponse", "MetaAndAssetCtxsResponse", "MetaResponse", "OrderStatusResponse", "SpotClearinghouseStateResponse", "SpotMetaResponse" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = GetInfoOrOrders200Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: MarketDataResponse
        if not isinstance(v, MarketDataResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MarketDataResponse`")
        else:
            match += 1
        # validate data type: List[OpenOrdersResponseInner]
        try:
            instance.oneof_schema_2_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: List[FrontendOpenOrdersResponseInner]
        try:
            instance.oneof_schema_3_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: List[UserFillsResponseInner]
        try:
            instance.oneof_schema_4_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: List[UserFillsResponseInner]
        try:
            instance.oneof_schema_5_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: OrderStatusResponse
        if not isinstance(v, OrderStatusResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OrderStatusResponse`")
        else:
            match += 1
        # validate data type: List[List[L2BookResponseInnerInner]]
        try:
            instance.oneof_schema_7_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: List[List[CandleSnapshotResponseInnerInner]]
        try:
            instance.oneof_schema_8_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: MetaResponse
        if not isinstance(v, MetaResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetaResponse`")
        else:
            match += 1
        # validate data type: MetaAndAssetCtxsResponse
        if not isinstance(v, MetaAndAssetCtxsResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MetaAndAssetCtxsResponse`")
        else:
            match += 1
        # validate data type: ClearinghouseStateResponse
        if not isinstance(v, ClearinghouseStateResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ClearinghouseStateResponse`")
        else:
            match += 1
        # validate data type: List[UserFundingOrLedgerUpdatesResponseInner]
        try:
            instance.oneof_schema_12_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: List[FundingHistoryResponseInner]
        try:
            instance.oneof_schema_13_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: SpotMetaResponse
        if not isinstance(v, SpotMetaResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SpotMetaResponse`")
        else:
            match += 1
        # validate data type: List[SpotMetaAndAssetCtxsResponseInner]
        try:
            instance.oneof_schema_15_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: SpotClearinghouseStateResponse
        if not isinstance(v, SpotClearinghouseStateResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SpotClearinghouseStateResponse`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in GetInfoOrOrders200Response with oneOf schemas: ClearinghouseStateResponse, List[FrontendOpenOrdersResponseInner], List[FundingHistoryResponseInner], List[List[CandleSnapshotResponseInnerInner]], List[List[L2BookResponseInnerInner]], List[OpenOrdersResponseInner], List[SpotMetaAndAssetCtxsResponseInner], List[UserFillsResponseInner], List[UserFundingOrLedgerUpdatesResponseInner], MarketDataResponse, MetaAndAssetCtxsResponse, MetaResponse, OrderStatusResponse, SpotClearinghouseStateResponse, SpotMetaResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in GetInfoOrOrders200Response with oneOf schemas: ClearinghouseStateResponse, List[FrontendOpenOrdersResponseInner], List[FundingHistoryResponseInner], List[List[CandleSnapshotResponseInnerInner]], List[List[L2BookResponseInnerInner]], List[OpenOrdersResponseInner], List[SpotMetaAndAssetCtxsResponseInner], List[UserFillsResponseInner], List[UserFundingOrLedgerUpdatesResponseInner], MarketDataResponse, MetaAndAssetCtxsResponse, MetaResponse, OrderStatusResponse, SpotClearinghouseStateResponse, SpotMetaResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into MarketDataResponse
        try:
            instance.actual_instance = MarketDataResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[OpenOrdersResponseInner]
        try:
            # validation
            instance.oneof_schema_2_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_2_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[FrontendOpenOrdersResponseInner]
        try:
            # validation
            instance.oneof_schema_3_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_3_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[UserFillsResponseInner]
        try:
            # validation
            instance.oneof_schema_4_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_4_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[UserFillsResponseInner]
        try:
            # validation
            instance.oneof_schema_5_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_5_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OrderStatusResponse
        try:
            instance.actual_instance = OrderStatusResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[List[L2BookResponseInnerInner]]
        try:
            # validation
            instance.oneof_schema_7_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_7_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[List[CandleSnapshotResponseInnerInner]]
        try:
            # validation
            instance.oneof_schema_8_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_8_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MetaResponse
        try:
            instance.actual_instance = MetaResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MetaAndAssetCtxsResponse
        try:
            instance.actual_instance = MetaAndAssetCtxsResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ClearinghouseStateResponse
        try:
            instance.actual_instance = ClearinghouseStateResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[UserFundingOrLedgerUpdatesResponseInner]
        try:
            # validation
            instance.oneof_schema_12_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_12_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[FundingHistoryResponseInner]
        try:
            # validation
            instance.oneof_schema_13_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_13_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SpotMetaResponse
        try:
            instance.actual_instance = SpotMetaResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[SpotMetaAndAssetCtxsResponseInner]
        try:
            # validation
            instance.oneof_schema_15_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_15_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SpotClearinghouseStateResponse
        try:
            instance.actual_instance = SpotClearinghouseStateResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into GetInfoOrOrders200Response with oneOf schemas: ClearinghouseStateResponse, List[FrontendOpenOrdersResponseInner], List[FundingHistoryResponseInner], List[List[CandleSnapshotResponseInnerInner]], List[List[L2BookResponseInnerInner]], List[OpenOrdersResponseInner], List[SpotMetaAndAssetCtxsResponseInner], List[UserFillsResponseInner], List[UserFundingOrLedgerUpdatesResponseInner], MarketDataResponse, MetaAndAssetCtxsResponse, MetaResponse, OrderStatusResponse, SpotClearinghouseStateResponse, SpotMetaResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into GetInfoOrOrders200Response with oneOf schemas: ClearinghouseStateResponse, List[FrontendOpenOrdersResponseInner], List[FundingHistoryResponseInner], List[List[CandleSnapshotResponseInnerInner]], List[List[L2BookResponseInnerInner]], List[OpenOrdersResponseInner], List[SpotMetaAndAssetCtxsResponseInner], List[UserFillsResponseInner], List[UserFundingOrLedgerUpdatesResponseInner], MarketDataResponse, MetaAndAssetCtxsResponse, MetaResponse, OrderStatusResponse, SpotClearinghouseStateResponse, SpotMetaResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ClearinghouseStateResponse, List[FrontendOpenOrdersResponseInner], List[FundingHistoryResponseInner], List[List[CandleSnapshotResponseInnerInner]], List[List[L2BookResponseInnerInner]], List[OpenOrdersResponseInner], List[SpotMetaAndAssetCtxsResponseInner], List[UserFillsResponseInner], List[UserFundingOrLedgerUpdatesResponseInner], MarketDataResponse, MetaAndAssetCtxsResponse, MetaResponse, OrderStatusResponse, SpotClearinghouseStateResponse, SpotMetaResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


