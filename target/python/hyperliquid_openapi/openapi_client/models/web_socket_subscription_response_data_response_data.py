# coding: utf-8

"""
    Hyperliquid API

    Documentation for the Hyperliquid public API     ## **Rate limits** The following rate limits apply per IP address:   - All REST requests have a weight limit of 1200 per minute. All documented exchange API requests have a weight of 1. All documented info API requests have a weight of either 2 or 20; these limits can be found in the description for each info request in the Info endpoint section. All explorer API requests have a weight of 40.   - Maximum of 100 websocket connections   - Maximum of 1000 websocket subscriptions   - Maximum of 10 unique users across user-specific websocket subscriptions  - Maximum of 2000 inbound messages per minute across all websocket connections   - Use websockets for lowest latency realtime data. See the python SDK for a full-featured example.    ## **Address-based L1 Rate limits**    The L1 rate limiting logic will allow 1 requests per 1 USDC traded cumulatively since address inception.   Using an order value of 100 USDC, this only requires a fill rate of 1%.    Each address starts with an initial buffer of 10000 requests. When rate limited, an address will still be allowed one request every 10 seconds.  Cancels have cumulative limit min(limit + 100000, limit * 2) where limit is the default limit for other actions. This way, hitting the address-based rate limit will still allow open orders to be canceled.   Note that this rate limit only applies to L1 actions, not info requests.   ## **Batched Requests** A batched request with n orders (or cancels) is treated as one request for IP based rate limiting, but as n requests for address-based L1 rate limiting. 

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.all_mids import AllMids
from openapi_client.models.candle_inner import CandleInner
from openapi_client.models.notification import Notification
from openapi_client.models.web_data2 import WebData2
from openapi_client.models.ws_book import WsBook
from openapi_client.models.ws_order import WsOrder
from openapi_client.models.ws_trade import WsTrade
from openapi_client.models.ws_user_event_inner import WsUserEventInner
from openapi_client.models.ws_user_fill import WsUserFill
from openapi_client.models.ws_user_funding import WsUserFunding
from openapi_client.models.ws_user_non_funding_ledger_update import WsUserNonFundingLedgerUpdate
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

WEBSOCKETSUBSCRIPTIONRESPONSEDATARESPONSEDATA_ONE_OF_SCHEMAS = ["AllMids", "List[CandleInner]", "List[WsUserEventInner]", "Notification", "WebData2", "WsBook", "WsOrder", "WsTrade", "WsUserFill", "WsUserFunding", "WsUserNonFundingLedgerUpdate"]

class WebSocketSubscriptionResponseDataResponseData(BaseModel):
    """
    WebSocketSubscriptionResponseDataResponseData
    """
    # data type: AllMids
    oneof_schema_1_validator: Optional[AllMids] = None
    # data type: Notification
    oneof_schema_2_validator: Optional[Notification] = None
    # data type: WebData2
    oneof_schema_3_validator: Optional[WebData2] = None
    # data type: List[CandleInner]
    oneof_schema_4_validator: Optional[List[CandleInner]] = None
    # data type: WsBook
    oneof_schema_5_validator: Optional[WsBook] = None
    # data type: WsTrade
    oneof_schema_6_validator: Optional[WsTrade] = None
    # data type: WsOrder
    oneof_schema_7_validator: Optional[WsOrder] = None
    # data type: List[WsUserEventInner]
    oneof_schema_8_validator: Optional[List[WsUserEventInner]] = None
    # data type: WsUserFill
    oneof_schema_9_validator: Optional[WsUserFill] = None
    # data type: WsUserFunding
    oneof_schema_10_validator: Optional[WsUserFunding] = None
    # data type: WsUserNonFundingLedgerUpdate
    oneof_schema_11_validator: Optional[WsUserNonFundingLedgerUpdate] = None
    actual_instance: Optional[Union[AllMids, List[CandleInner], List[WsUserEventInner], Notification, WebData2, WsBook, WsOrder, WsTrade, WsUserFill, WsUserFunding, WsUserNonFundingLedgerUpdate]] = None
    one_of_schemas: Set[str] = { "AllMids", "List[CandleInner]", "List[WsUserEventInner]", "Notification", "WebData2", "WsBook", "WsOrder", "WsTrade", "WsUserFill", "WsUserFunding", "WsUserNonFundingLedgerUpdate" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = WebSocketSubscriptionResponseDataResponseData.model_construct()
        error_messages = []
        match = 0
        # validate data type: AllMids
        if not isinstance(v, AllMids):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AllMids`")
        else:
            match += 1
        # validate data type: Notification
        if not isinstance(v, Notification):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Notification`")
        else:
            match += 1
        # validate data type: WebData2
        if not isinstance(v, WebData2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebData2`")
        else:
            match += 1
        # validate data type: List[CandleInner]
        try:
            instance.oneof_schema_4_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: WsBook
        if not isinstance(v, WsBook):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WsBook`")
        else:
            match += 1
        # validate data type: WsTrade
        if not isinstance(v, WsTrade):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WsTrade`")
        else:
            match += 1
        # validate data type: WsOrder
        if not isinstance(v, WsOrder):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WsOrder`")
        else:
            match += 1
        # validate data type: List[WsUserEventInner]
        try:
            instance.oneof_schema_8_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: WsUserFill
        if not isinstance(v, WsUserFill):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WsUserFill`")
        else:
            match += 1
        # validate data type: WsUserFunding
        if not isinstance(v, WsUserFunding):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WsUserFunding`")
        else:
            match += 1
        # validate data type: WsUserNonFundingLedgerUpdate
        if not isinstance(v, WsUserNonFundingLedgerUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WsUserNonFundingLedgerUpdate`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in WebSocketSubscriptionResponseDataResponseData with oneOf schemas: AllMids, List[CandleInner], List[WsUserEventInner], Notification, WebData2, WsBook, WsOrder, WsTrade, WsUserFill, WsUserFunding, WsUserNonFundingLedgerUpdate. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in WebSocketSubscriptionResponseDataResponseData with oneOf schemas: AllMids, List[CandleInner], List[WsUserEventInner], Notification, WebData2, WsBook, WsOrder, WsTrade, WsUserFill, WsUserFunding, WsUserNonFundingLedgerUpdate. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AllMids
        try:
            instance.actual_instance = AllMids.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Notification
        try:
            instance.actual_instance = Notification.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WebData2
        try:
            instance.actual_instance = WebData2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[CandleInner]
        try:
            # validation
            instance.oneof_schema_4_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_4_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WsBook
        try:
            instance.actual_instance = WsBook.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WsTrade
        try:
            instance.actual_instance = WsTrade.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WsOrder
        try:
            instance.actual_instance = WsOrder.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[WsUserEventInner]
        try:
            # validation
            instance.oneof_schema_8_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_8_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WsUserFill
        try:
            instance.actual_instance = WsUserFill.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WsUserFunding
        try:
            instance.actual_instance = WsUserFunding.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WsUserNonFundingLedgerUpdate
        try:
            instance.actual_instance = WsUserNonFundingLedgerUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into WebSocketSubscriptionResponseDataResponseData with oneOf schemas: AllMids, List[CandleInner], List[WsUserEventInner], Notification, WebData2, WsBook, WsOrder, WsTrade, WsUserFill, WsUserFunding, WsUserNonFundingLedgerUpdate. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into WebSocketSubscriptionResponseDataResponseData with oneOf schemas: AllMids, List[CandleInner], List[WsUserEventInner], Notification, WebData2, WsBook, WsOrder, WsTrade, WsUserFill, WsUserFunding, WsUserNonFundingLedgerUpdate. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AllMids, List[CandleInner], List[WsUserEventInner], Notification, WebData2, WsBook, WsOrder, WsTrade, WsUserFill, WsUserFunding, WsUserNonFundingLedgerUpdate]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


