# coding: utf-8

"""
    Hyperliquid API

    Documentation for the Hyperliquid public API     ## **Rate limits** The following rate limits apply per IP address:   - All REST requests have a weight limit of 1200 per minute. All documented exchange API requests have a weight of 1. All documented info API requests have a weight of either 2 or 20; these limits can be found in the description for each info request in the Info endpoint section. All explorer API requests have a weight of 40.   - Maximum of 100 websocket connections   - Maximum of 1000 websocket subscriptions   - Maximum of 10 unique users across user-specific websocket subscriptions  - Maximum of 2000 inbound messages per minute across all websocket connections   - Use websockets for lowest latency realtime data. See the python SDK for a full-featured example.    ## **Address-based L1 Rate limits**    The L1 rate limiting logic will allow 1 requests per 1 USDC traded cumulatively since address inception.   Using an order value of 100 USDC, this only requires a fill rate of 1%.    Each address starts with an initial buffer of 10000 requests. When rate limited, an address will still be allowed one request every 10 seconds.  Cancels have cumulative limit min(limit + 100000, limit * 2) where limit is the default limit for other actions. This way, hitting the address-based rate limit will still allow open orders to be canceled.   Note that this rate limit only applies to L1 actions, not info requests.   ## **Batched Requests** A batched request with n orders (or cancels) is treated as one request for IP based rate limiting, but as n requests for address-based L1 rate limiting. 

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.batch_modify_order_error_response import BatchModifyOrderErrorResponse
from openapi_client.models.batch_modify_order_response import BatchModifyOrderResponse
from openapi_client.models.cancel_order_by_cloid_error_response import CancelOrderByCloidErrorResponse
from openapi_client.models.cancel_order_by_cloid_success_response import CancelOrderByCloidSuccessResponse
from openapi_client.models.cancel_order_error_response import CancelOrderErrorResponse
from openapi_client.models.cancel_order_success_response import CancelOrderSuccessResponse
from openapi_client.models.error_response import ErrorResponse
from openapi_client.models.initiate_withdrawal_error_response import InitiateWithdrawalErrorResponse
from openapi_client.models.initiate_withdrawal_response import InitiateWithdrawalResponse
from openapi_client.models.l1_spot_transfer_error_response import L1SpotTransferErrorResponse
from openapi_client.models.l1_spot_transfer_response import L1SpotTransferResponse
from openapi_client.models.modify_order_error_response import ModifyOrderErrorResponse
from openapi_client.models.modify_order_response import ModifyOrderResponse
from openapi_client.models.place_order_error_response import PlaceOrderErrorResponse
from openapi_client.models.place_order_filled_response import PlaceOrderFilledResponse
from openapi_client.models.place_order_resting_response import PlaceOrderRestingResponse
from openapi_client.models.schedule_cancel_response import ScheduleCancelResponse
from openapi_client.models.spot_to_perp_transfer_error_response import SpotToPerpTransferErrorResponse
from openapi_client.models.spot_to_perp_transfer_response import SpotToPerpTransferResponse
from openapi_client.models.update_isolated_margin_error_response import UpdateIsolatedMarginErrorResponse
from openapi_client.models.update_isolated_margin_response import UpdateIsolatedMarginResponse
from openapi_client.models.update_leverage_error_response import UpdateLeverageErrorResponse
from openapi_client.models.update_leverage_response import UpdateLeverageResponse
from openapi_client.models.vault_transfer_error_response import VaultTransferErrorResponse
from openapi_client.models.vault_transfer_response import VaultTransferResponse
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

EXCHANGEPOST200RESPONSE_ONE_OF_SCHEMAS = ["BatchModifyOrderErrorResponse", "BatchModifyOrderResponse", "CancelOrderByCloidErrorResponse", "CancelOrderByCloidSuccessResponse", "CancelOrderErrorResponse", "CancelOrderSuccessResponse", "ErrorResponse", "InitiateWithdrawalErrorResponse", "InitiateWithdrawalResponse", "L1SpotTransferErrorResponse", "L1SpotTransferResponse", "ModifyOrderErrorResponse", "ModifyOrderResponse", "PlaceOrderErrorResponse", "PlaceOrderFilledResponse", "PlaceOrderRestingResponse", "ScheduleCancelResponse", "SpotToPerpTransferErrorResponse", "SpotToPerpTransferResponse", "UpdateIsolatedMarginErrorResponse", "UpdateIsolatedMarginResponse", "UpdateLeverageErrorResponse", "UpdateLeverageResponse", "VaultTransferErrorResponse", "VaultTransferResponse"]

class ExchangePost200Response(BaseModel):
    """
    ExchangePost200Response
    """
    # data type: PlaceOrderRestingResponse
    oneof_schema_1_validator: Optional[PlaceOrderRestingResponse] = None
    # data type: PlaceOrderErrorResponse
    oneof_schema_2_validator: Optional[PlaceOrderErrorResponse] = None
    # data type: PlaceOrderFilledResponse
    oneof_schema_3_validator: Optional[PlaceOrderFilledResponse] = None
    # data type: CancelOrderSuccessResponse
    oneof_schema_4_validator: Optional[CancelOrderSuccessResponse] = None
    # data type: CancelOrderErrorResponse
    oneof_schema_5_validator: Optional[CancelOrderErrorResponse] = None
    # data type: CancelOrderByCloidSuccessResponse
    oneof_schema_6_validator: Optional[CancelOrderByCloidSuccessResponse] = None
    # data type: CancelOrderByCloidErrorResponse
    oneof_schema_7_validator: Optional[CancelOrderByCloidErrorResponse] = None
    # data type: ScheduleCancelResponse
    oneof_schema_8_validator: Optional[ScheduleCancelResponse] = None
    # data type: ErrorResponse
    oneof_schema_9_validator: Optional[ErrorResponse] = None
    # data type: ModifyOrderResponse
    oneof_schema_10_validator: Optional[ModifyOrderResponse] = None
    # data type: ModifyOrderErrorResponse
    oneof_schema_11_validator: Optional[ModifyOrderErrorResponse] = None
    # data type: BatchModifyOrderResponse
    oneof_schema_12_validator: Optional[BatchModifyOrderResponse] = None
    # data type: BatchModifyOrderErrorResponse
    oneof_schema_13_validator: Optional[BatchModifyOrderErrorResponse] = None
    # data type: UpdateLeverageResponse
    oneof_schema_14_validator: Optional[UpdateLeverageResponse] = None
    # data type: UpdateLeverageErrorResponse
    oneof_schema_15_validator: Optional[UpdateLeverageErrorResponse] = None
    # data type: UpdateIsolatedMarginResponse
    oneof_schema_16_validator: Optional[UpdateIsolatedMarginResponse] = None
    # data type: UpdateIsolatedMarginErrorResponse
    oneof_schema_17_validator: Optional[UpdateIsolatedMarginErrorResponse] = None
    # data type: L1SpotTransferResponse
    oneof_schema_18_validator: Optional[L1SpotTransferResponse] = None
    # data type: L1SpotTransferErrorResponse
    oneof_schema_19_validator: Optional[L1SpotTransferErrorResponse] = None
    # data type: InitiateWithdrawalResponse
    oneof_schema_20_validator: Optional[InitiateWithdrawalResponse] = None
    # data type: InitiateWithdrawalErrorResponse
    oneof_schema_21_validator: Optional[InitiateWithdrawalErrorResponse] = None
    # data type: SpotToPerpTransferResponse
    oneof_schema_22_validator: Optional[SpotToPerpTransferResponse] = None
    # data type: SpotToPerpTransferErrorResponse
    oneof_schema_23_validator: Optional[SpotToPerpTransferErrorResponse] = None
    # data type: VaultTransferResponse
    oneof_schema_24_validator: Optional[VaultTransferResponse] = None
    # data type: VaultTransferErrorResponse
    oneof_schema_25_validator: Optional[VaultTransferErrorResponse] = None
    actual_instance: Optional[Union[BatchModifyOrderErrorResponse, BatchModifyOrderResponse, CancelOrderByCloidErrorResponse, CancelOrderByCloidSuccessResponse, CancelOrderErrorResponse, CancelOrderSuccessResponse, ErrorResponse, InitiateWithdrawalErrorResponse, InitiateWithdrawalResponse, L1SpotTransferErrorResponse, L1SpotTransferResponse, ModifyOrderErrorResponse, ModifyOrderResponse, PlaceOrderErrorResponse, PlaceOrderFilledResponse, PlaceOrderRestingResponse, ScheduleCancelResponse, SpotToPerpTransferErrorResponse, SpotToPerpTransferResponse, UpdateIsolatedMarginErrorResponse, UpdateIsolatedMarginResponse, UpdateLeverageErrorResponse, UpdateLeverageResponse, VaultTransferErrorResponse, VaultTransferResponse]] = None
    one_of_schemas: Set[str] = { "BatchModifyOrderErrorResponse", "BatchModifyOrderResponse", "CancelOrderByCloidErrorResponse", "CancelOrderByCloidSuccessResponse", "CancelOrderErrorResponse", "CancelOrderSuccessResponse", "ErrorResponse", "InitiateWithdrawalErrorResponse", "InitiateWithdrawalResponse", "L1SpotTransferErrorResponse", "L1SpotTransferResponse", "ModifyOrderErrorResponse", "ModifyOrderResponse", "PlaceOrderErrorResponse", "PlaceOrderFilledResponse", "PlaceOrderRestingResponse", "ScheduleCancelResponse", "SpotToPerpTransferErrorResponse", "SpotToPerpTransferResponse", "UpdateIsolatedMarginErrorResponse", "UpdateIsolatedMarginResponse", "UpdateLeverageErrorResponse", "UpdateLeverageResponse", "VaultTransferErrorResponse", "VaultTransferResponse" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ExchangePost200Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: PlaceOrderRestingResponse
        if not isinstance(v, PlaceOrderRestingResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlaceOrderRestingResponse`")
        else:
            match += 1
        # validate data type: PlaceOrderErrorResponse
        if not isinstance(v, PlaceOrderErrorResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlaceOrderErrorResponse`")
        else:
            match += 1
        # validate data type: PlaceOrderFilledResponse
        if not isinstance(v, PlaceOrderFilledResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlaceOrderFilledResponse`")
        else:
            match += 1
        # validate data type: CancelOrderSuccessResponse
        if not isinstance(v, CancelOrderSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CancelOrderSuccessResponse`")
        else:
            match += 1
        # validate data type: CancelOrderErrorResponse
        if not isinstance(v, CancelOrderErrorResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CancelOrderErrorResponse`")
        else:
            match += 1
        # validate data type: CancelOrderByCloidSuccessResponse
        if not isinstance(v, CancelOrderByCloidSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CancelOrderByCloidSuccessResponse`")
        else:
            match += 1
        # validate data type: CancelOrderByCloidErrorResponse
        if not isinstance(v, CancelOrderByCloidErrorResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CancelOrderByCloidErrorResponse`")
        else:
            match += 1
        # validate data type: ScheduleCancelResponse
        if not isinstance(v, ScheduleCancelResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ScheduleCancelResponse`")
        else:
            match += 1
        # validate data type: ErrorResponse
        if not isinstance(v, ErrorResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ErrorResponse`")
        else:
            match += 1
        # validate data type: ModifyOrderResponse
        if not isinstance(v, ModifyOrderResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ModifyOrderResponse`")
        else:
            match += 1
        # validate data type: ModifyOrderErrorResponse
        if not isinstance(v, ModifyOrderErrorResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ModifyOrderErrorResponse`")
        else:
            match += 1
        # validate data type: BatchModifyOrderResponse
        if not isinstance(v, BatchModifyOrderResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BatchModifyOrderResponse`")
        else:
            match += 1
        # validate data type: BatchModifyOrderErrorResponse
        if not isinstance(v, BatchModifyOrderErrorResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BatchModifyOrderErrorResponse`")
        else:
            match += 1
        # validate data type: UpdateLeverageResponse
        if not isinstance(v, UpdateLeverageResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateLeverageResponse`")
        else:
            match += 1
        # validate data type: UpdateLeverageErrorResponse
        if not isinstance(v, UpdateLeverageErrorResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateLeverageErrorResponse`")
        else:
            match += 1
        # validate data type: UpdateIsolatedMarginResponse
        if not isinstance(v, UpdateIsolatedMarginResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateIsolatedMarginResponse`")
        else:
            match += 1
        # validate data type: UpdateIsolatedMarginErrorResponse
        if not isinstance(v, UpdateIsolatedMarginErrorResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateIsolatedMarginErrorResponse`")
        else:
            match += 1
        # validate data type: L1SpotTransferResponse
        if not isinstance(v, L1SpotTransferResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `L1SpotTransferResponse`")
        else:
            match += 1
        # validate data type: L1SpotTransferErrorResponse
        if not isinstance(v, L1SpotTransferErrorResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `L1SpotTransferErrorResponse`")
        else:
            match += 1
        # validate data type: InitiateWithdrawalResponse
        if not isinstance(v, InitiateWithdrawalResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InitiateWithdrawalResponse`")
        else:
            match += 1
        # validate data type: InitiateWithdrawalErrorResponse
        if not isinstance(v, InitiateWithdrawalErrorResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InitiateWithdrawalErrorResponse`")
        else:
            match += 1
        # validate data type: SpotToPerpTransferResponse
        if not isinstance(v, SpotToPerpTransferResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SpotToPerpTransferResponse`")
        else:
            match += 1
        # validate data type: SpotToPerpTransferErrorResponse
        if not isinstance(v, SpotToPerpTransferErrorResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SpotToPerpTransferErrorResponse`")
        else:
            match += 1
        # validate data type: VaultTransferResponse
        if not isinstance(v, VaultTransferResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VaultTransferResponse`")
        else:
            match += 1
        # validate data type: VaultTransferErrorResponse
        if not isinstance(v, VaultTransferErrorResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VaultTransferErrorResponse`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ExchangePost200Response with oneOf schemas: BatchModifyOrderErrorResponse, BatchModifyOrderResponse, CancelOrderByCloidErrorResponse, CancelOrderByCloidSuccessResponse, CancelOrderErrorResponse, CancelOrderSuccessResponse, ErrorResponse, InitiateWithdrawalErrorResponse, InitiateWithdrawalResponse, L1SpotTransferErrorResponse, L1SpotTransferResponse, ModifyOrderErrorResponse, ModifyOrderResponse, PlaceOrderErrorResponse, PlaceOrderFilledResponse, PlaceOrderRestingResponse, ScheduleCancelResponse, SpotToPerpTransferErrorResponse, SpotToPerpTransferResponse, UpdateIsolatedMarginErrorResponse, UpdateIsolatedMarginResponse, UpdateLeverageErrorResponse, UpdateLeverageResponse, VaultTransferErrorResponse, VaultTransferResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ExchangePost200Response with oneOf schemas: BatchModifyOrderErrorResponse, BatchModifyOrderResponse, CancelOrderByCloidErrorResponse, CancelOrderByCloidSuccessResponse, CancelOrderErrorResponse, CancelOrderSuccessResponse, ErrorResponse, InitiateWithdrawalErrorResponse, InitiateWithdrawalResponse, L1SpotTransferErrorResponse, L1SpotTransferResponse, ModifyOrderErrorResponse, ModifyOrderResponse, PlaceOrderErrorResponse, PlaceOrderFilledResponse, PlaceOrderRestingResponse, ScheduleCancelResponse, SpotToPerpTransferErrorResponse, SpotToPerpTransferResponse, UpdateIsolatedMarginErrorResponse, UpdateIsolatedMarginResponse, UpdateLeverageErrorResponse, UpdateLeverageResponse, VaultTransferErrorResponse, VaultTransferResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into PlaceOrderRestingResponse
        try:
            instance.actual_instance = PlaceOrderRestingResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PlaceOrderErrorResponse
        try:
            instance.actual_instance = PlaceOrderErrorResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PlaceOrderFilledResponse
        try:
            instance.actual_instance = PlaceOrderFilledResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CancelOrderSuccessResponse
        try:
            instance.actual_instance = CancelOrderSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CancelOrderErrorResponse
        try:
            instance.actual_instance = CancelOrderErrorResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CancelOrderByCloidSuccessResponse
        try:
            instance.actual_instance = CancelOrderByCloidSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CancelOrderByCloidErrorResponse
        try:
            instance.actual_instance = CancelOrderByCloidErrorResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ScheduleCancelResponse
        try:
            instance.actual_instance = ScheduleCancelResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ErrorResponse
        try:
            instance.actual_instance = ErrorResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ModifyOrderResponse
        try:
            instance.actual_instance = ModifyOrderResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ModifyOrderErrorResponse
        try:
            instance.actual_instance = ModifyOrderErrorResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BatchModifyOrderResponse
        try:
            instance.actual_instance = BatchModifyOrderResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BatchModifyOrderErrorResponse
        try:
            instance.actual_instance = BatchModifyOrderErrorResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateLeverageResponse
        try:
            instance.actual_instance = UpdateLeverageResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateLeverageErrorResponse
        try:
            instance.actual_instance = UpdateLeverageErrorResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateIsolatedMarginResponse
        try:
            instance.actual_instance = UpdateIsolatedMarginResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateIsolatedMarginErrorResponse
        try:
            instance.actual_instance = UpdateIsolatedMarginErrorResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into L1SpotTransferResponse
        try:
            instance.actual_instance = L1SpotTransferResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into L1SpotTransferErrorResponse
        try:
            instance.actual_instance = L1SpotTransferErrorResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InitiateWithdrawalResponse
        try:
            instance.actual_instance = InitiateWithdrawalResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InitiateWithdrawalErrorResponse
        try:
            instance.actual_instance = InitiateWithdrawalErrorResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SpotToPerpTransferResponse
        try:
            instance.actual_instance = SpotToPerpTransferResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SpotToPerpTransferErrorResponse
        try:
            instance.actual_instance = SpotToPerpTransferErrorResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VaultTransferResponse
        try:
            instance.actual_instance = VaultTransferResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VaultTransferErrorResponse
        try:
            instance.actual_instance = VaultTransferErrorResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ExchangePost200Response with oneOf schemas: BatchModifyOrderErrorResponse, BatchModifyOrderResponse, CancelOrderByCloidErrorResponse, CancelOrderByCloidSuccessResponse, CancelOrderErrorResponse, CancelOrderSuccessResponse, ErrorResponse, InitiateWithdrawalErrorResponse, InitiateWithdrawalResponse, L1SpotTransferErrorResponse, L1SpotTransferResponse, ModifyOrderErrorResponse, ModifyOrderResponse, PlaceOrderErrorResponse, PlaceOrderFilledResponse, PlaceOrderRestingResponse, ScheduleCancelResponse, SpotToPerpTransferErrorResponse, SpotToPerpTransferResponse, UpdateIsolatedMarginErrorResponse, UpdateIsolatedMarginResponse, UpdateLeverageErrorResponse, UpdateLeverageResponse, VaultTransferErrorResponse, VaultTransferResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ExchangePost200Response with oneOf schemas: BatchModifyOrderErrorResponse, BatchModifyOrderResponse, CancelOrderByCloidErrorResponse, CancelOrderByCloidSuccessResponse, CancelOrderErrorResponse, CancelOrderSuccessResponse, ErrorResponse, InitiateWithdrawalErrorResponse, InitiateWithdrawalResponse, L1SpotTransferErrorResponse, L1SpotTransferResponse, ModifyOrderErrorResponse, ModifyOrderResponse, PlaceOrderErrorResponse, PlaceOrderFilledResponse, PlaceOrderRestingResponse, ScheduleCancelResponse, SpotToPerpTransferErrorResponse, SpotToPerpTransferResponse, UpdateIsolatedMarginErrorResponse, UpdateIsolatedMarginResponse, UpdateLeverageErrorResponse, UpdateLeverageResponse, VaultTransferErrorResponse, VaultTransferResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], BatchModifyOrderErrorResponse, BatchModifyOrderResponse, CancelOrderByCloidErrorResponse, CancelOrderByCloidSuccessResponse, CancelOrderErrorResponse, CancelOrderSuccessResponse, ErrorResponse, InitiateWithdrawalErrorResponse, InitiateWithdrawalResponse, L1SpotTransferErrorResponse, L1SpotTransferResponse, ModifyOrderErrorResponse, ModifyOrderResponse, PlaceOrderErrorResponse, PlaceOrderFilledResponse, PlaceOrderRestingResponse, ScheduleCancelResponse, SpotToPerpTransferErrorResponse, SpotToPerpTransferResponse, UpdateIsolatedMarginErrorResponse, UpdateIsolatedMarginResponse, UpdateLeverageErrorResponse, UpdateLeverageResponse, VaultTransferErrorResponse, VaultTransferResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


