# coding: utf-8

"""
    Hyperliquid API

    Documentation for the Hyperliquid public API     ## **Rate limits** The following rate limits apply per IP address:   - All REST requests have a weight limit of 1200 per minute. All documented exchange API requests have a weight of 1. All documented info API requests have a weight of either 2 or 20; these limits can be found in the description for each info request in the Info endpoint section. All explorer API requests have a weight of 40.   - Maximum of 100 websocket connections   - Maximum of 1000 websocket subscriptions   - Maximum of 10 unique users across user-specific websocket subscriptions  - Maximum of 2000 inbound messages per minute across all websocket connections   - Use websockets for lowest latency realtime data. See the python SDK for a full-featured example.    ## **Address-based L1 Rate limits**    The L1 rate limiting logic will allow 1 requests per 1 USDC traded cumulatively since address inception.   Using an order value of 100 USDC, this only requires a fill rate of 1%.    Each address starts with an initial buffer of 10000 requests. When rate limited, an address will still be allowed one request every 10 seconds.  Cancels have cumulative limit min(limit + 100000, limit * 2) where limit is the default limit for other actions. This way, hitting the address-based rate limit will still allow open orders to be canceled.   Note that this rate limit only applies to L1 actions, not info requests.   ## **Batched Requests** A batched request with n orders (or cancels) is treated as one request for IP based rate limiting, but as n requests for address-based L1 rate limiting. 

    The version of the OpenAPI document: 1.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FrontendOpenOrdersResponseInner(BaseModel):
    """
    FrontendOpenOrdersResponseInner
    """ # noqa: E501
    coin: Optional[StrictStr] = Field(default=None, description="The cryptocurrency coin.")
    is_position_tpsl: Optional[StrictBool] = Field(default=None, description="Whether the order is a position TPSL.", alias="isPositionTpsl")
    is_trigger: Optional[StrictBool] = Field(default=None, description="Whether the order is a trigger order.", alias="isTrigger")
    limit_px: Optional[StrictStr] = Field(default=None, description="The limit price for the order.", alias="limitPx")
    oid: Optional[StrictInt] = Field(default=None, description="The order ID.")
    order_type: Optional[StrictStr] = Field(default=None, description="The type of the order.", alias="orderType")
    orig_sz: Optional[StrictStr] = Field(default=None, description="The original size of the order.", alias="origSz")
    reduce_only: Optional[StrictBool] = Field(default=None, description="Whether the order is reduce-only.", alias="reduceOnly")
    side: Optional[StrictStr] = Field(default=None, description="The side of the order (e.g., Buy or Sell).")
    sz: Optional[StrictStr] = Field(default=None, description="The size of the order.")
    timestamp: Optional[StrictInt] = Field(default=None, description="The timestamp of the order.")
    trigger_condition: Optional[StrictStr] = Field(default=None, description="The trigger condition for the order.", alias="triggerCondition")
    trigger_px: Optional[Dict[str, Any]] = Field(default=None, description="The trigger price for the order.", alias="triggerPx")
    __properties: ClassVar[List[str]] = ["coin", "isPositionTpsl", "isTrigger", "limitPx", "oid", "orderType", "origSz", "reduceOnly", "side", "sz", "timestamp", "triggerCondition", "triggerPx"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FrontendOpenOrdersResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FrontendOpenOrdersResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coin": obj.get("coin"),
            "isPositionTpsl": obj.get("isPositionTpsl"),
            "isTrigger": obj.get("isTrigger"),
            "limitPx": obj.get("limitPx"),
            "oid": obj.get("oid"),
            "orderType": obj.get("orderType"),
            "origSz": obj.get("origSz"),
            "reduceOnly": obj.get("reduceOnly"),
            "side": obj.get("side"),
            "sz": obj.get("sz"),
            "timestamp": obj.get("timestamp"),
            "triggerCondition": obj.get("triggerCondition"),
            "triggerPx": obj.get("triggerPx")
        })
        return _obj


