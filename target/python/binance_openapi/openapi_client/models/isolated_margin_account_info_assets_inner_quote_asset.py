# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class IsolatedMarginAccountInfoAssetsInnerQuoteAsset(BaseModel):
    """
    IsolatedMarginAccountInfoAssetsInnerQuoteAsset
    """ # noqa: E501
    asset: StrictStr
    borrow_enabled: StrictBool = Field(alias="borrowEnabled")
    borrowed: StrictStr
    free: StrictStr
    interest: StrictStr
    locked: StrictStr
    net_asset: StrictStr = Field(alias="netAsset")
    net_asset_of_btc: StrictStr = Field(alias="netAssetOfBtc")
    repay_enabled: StrictBool = Field(alias="repayEnabled")
    total_asset: StrictStr = Field(alias="totalAsset")
    __properties: ClassVar[List[str]] = ["asset", "borrowEnabled", "borrowed", "free", "interest", "locked", "netAsset", "netAssetOfBtc", "repayEnabled", "totalAsset"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IsolatedMarginAccountInfoAssetsInnerQuoteAsset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IsolatedMarginAccountInfoAssetsInnerQuoteAsset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset": obj.get("asset"),
            "borrowEnabled": obj.get("borrowEnabled"),
            "borrowed": obj.get("borrowed"),
            "free": obj.get("free"),
            "interest": obj.get("interest"),
            "locked": obj.get("locked"),
            "netAsset": obj.get("netAsset"),
            "netAssetOfBtc": obj.get("netAssetOfBtc"),
            "repayEnabled": obj.get("repayEnabled"),
            "totalAsset": obj.get("totalAsset")
        })
        return _obj


