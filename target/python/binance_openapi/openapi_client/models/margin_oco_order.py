# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.margin_oco_order_order_reports_inner import MarginOcoOrderOrderReportsInner
from openapi_client.models.margin_oco_order_orders_inner import MarginOcoOrderOrdersInner
from typing import Optional, Set
from typing_extensions import Self

class MarginOcoOrder(BaseModel):
    """
    MarginOcoOrder
    """ # noqa: E501
    order_list_id: StrictInt = Field(alias="orderListId")
    contingency_type: StrictStr = Field(alias="contingencyType")
    list_status_type: StrictStr = Field(alias="listStatusType")
    list_order_status: StrictStr = Field(alias="listOrderStatus")
    list_client_order_id: StrictStr = Field(alias="listClientOrderId")
    transaction_time: StrictInt = Field(alias="transactionTime")
    symbol: StrictStr
    is_isolated: StrictBool = Field(alias="isIsolated")
    orders: List[MarginOcoOrderOrdersInner]
    order_reports: List[MarginOcoOrderOrderReportsInner] = Field(alias="orderReports")
    __properties: ClassVar[List[str]] = ["orderListId", "contingencyType", "listStatusType", "listOrderStatus", "listClientOrderId", "transactionTime", "symbol", "isIsolated", "orders", "orderReports"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarginOcoOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in orders (list)
        _items = []
        if self.orders:
            for _item in self.orders:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_reports (list)
        _items = []
        if self.order_reports:
            for _item in self.order_reports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orderReports'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarginOcoOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderListId": obj.get("orderListId"),
            "contingencyType": obj.get("contingencyType"),
            "listStatusType": obj.get("listStatusType"),
            "listOrderStatus": obj.get("listOrderStatus"),
            "listClientOrderId": obj.get("listClientOrderId"),
            "transactionTime": obj.get("transactionTime"),
            "symbol": obj.get("symbol"),
            "isIsolated": obj.get("isIsolated"),
            "orders": [MarginOcoOrderOrdersInner.from_dict(_item) for _item in obj["orders"]] if obj.get("orders") is not None else None,
            "orderReports": [MarginOcoOrderOrderReportsInner.from_dict(_item) for _item in obj["orderReports"]] if obj.get("orderReports") is not None else None
        })
        return _obj


