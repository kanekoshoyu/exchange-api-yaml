# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class SapiV1MiningPaymentListGet200ResponseDataAccountProfitsInner(BaseModel):
    """
    SapiV1MiningPaymentListGet200ResponseDataAccountProfitsInner
    """ # noqa: E501
    time: StrictInt = Field(description="Mining date")
    type: StrictInt = Field(description="0:Mining Wallet,5:Mining Address,7:Pool Savings,8:Transferred,31:Income Transfer ,32:Hashrate Resale-Mining Wallet 33:Hashrate Resale-Pool Savings")
    hash_transfer: StrictInt = Field(description="Transferred Hashrate", alias="hashTransfer")
    transfer_amount: Union[StrictFloat, StrictInt] = Field(description="Transferred Income", alias="transferAmount")
    day_hash_rate: StrictInt = Field(description="Daily Hashrate", alias="dayHashRate")
    profit_amount: Union[StrictFloat, StrictInt] = Field(description="Earnings Amount", alias="profitAmount")
    coin_name: StrictStr = Field(description="Coin Type", alias="coinName")
    status: StrictInt = Field(description="Status：0:Unpaid, 1:Paying  2：Paid")
    __properties: ClassVar[List[str]] = ["time", "type", "hashTransfer", "transferAmount", "dayHashRate", "profitAmount", "coinName", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapiV1MiningPaymentListGet200ResponseDataAccountProfitsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapiV1MiningPaymentListGet200ResponseDataAccountProfitsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "time": obj.get("time"),
            "type": obj.get("type"),
            "hashTransfer": obj.get("hashTransfer"),
            "transferAmount": obj.get("transferAmount"),
            "dayHashRate": obj.get("dayHashRate"),
            "profitAmount": obj.get("profitAmount"),
            "coinName": obj.get("coinName"),
            "status": obj.get("status")
        })
        return _obj


