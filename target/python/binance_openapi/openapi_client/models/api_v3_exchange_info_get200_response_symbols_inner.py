# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.api_v3_exchange_info_get200_response_symbols_inner_filters_inner import ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner
from typing import Optional, Set
from typing_extensions import Self

class ApiV3ExchangeInfoGet200ResponseSymbolsInner(BaseModel):
    """
    ApiV3ExchangeInfoGet200ResponseSymbolsInner
    """ # noqa: E501
    symbol: StrictStr
    status: StrictStr
    base_asset: StrictStr = Field(alias="baseAsset")
    base_asset_precision: StrictInt = Field(alias="baseAssetPrecision")
    quote_asset: StrictStr = Field(alias="quoteAsset")
    quote_asset_precision: StrictInt = Field(alias="quoteAssetPrecision")
    base_commission_precision: StrictInt = Field(alias="baseCommissionPrecision")
    quote_commission_precision: StrictInt = Field(alias="quoteCommissionPrecision")
    order_types: List[StrictStr] = Field(alias="orderTypes")
    iceberg_allowed: StrictBool = Field(alias="icebergAllowed")
    oco_allowed: StrictBool = Field(alias="ocoAllowed")
    oto_allowed: StrictBool = Field(alias="otoAllowed")
    quote_order_qty_market_allowed: StrictBool = Field(alias="quoteOrderQtyMarketAllowed")
    allow_trailing_stop: StrictBool = Field(alias="allowTrailingStop")
    cancel_replace_allowed: StrictBool = Field(alias="cancelReplaceAllowed")
    is_spot_trading_allowed: StrictBool = Field(alias="isSpotTradingAllowed")
    is_margin_trading_allowed: StrictBool = Field(alias="isMarginTradingAllowed")
    filters: List[ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner]
    permissions: List[StrictStr]
    permission_sets: List[List[StrictStr]] = Field(alias="permissionSets")
    default_self_trade_prevention_mode: StrictStr = Field(alias="defaultSelfTradePreventionMode")
    allowed_self_trade_prevention_modes: List[StrictStr] = Field(alias="allowedSelfTradePreventionModes")
    __properties: ClassVar[List[str]] = ["symbol", "status", "baseAsset", "baseAssetPrecision", "quoteAsset", "quoteAssetPrecision", "baseCommissionPrecision", "quoteCommissionPrecision", "orderTypes", "icebergAllowed", "ocoAllowed", "otoAllowed", "quoteOrderQtyMarketAllowed", "allowTrailingStop", "cancelReplaceAllowed", "isSpotTradingAllowed", "isMarginTradingAllowed", "filters", "permissions", "permissionSets", "defaultSelfTradePreventionMode", "allowedSelfTradePreventionModes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiV3ExchangeInfoGet200ResponseSymbolsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item in self.filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['filters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiV3ExchangeInfoGet200ResponseSymbolsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "status": obj.get("status"),
            "baseAsset": obj.get("baseAsset"),
            "baseAssetPrecision": obj.get("baseAssetPrecision"),
            "quoteAsset": obj.get("quoteAsset"),
            "quoteAssetPrecision": obj.get("quoteAssetPrecision"),
            "baseCommissionPrecision": obj.get("baseCommissionPrecision"),
            "quoteCommissionPrecision": obj.get("quoteCommissionPrecision"),
            "orderTypes": obj.get("orderTypes"),
            "icebergAllowed": obj.get("icebergAllowed"),
            "ocoAllowed": obj.get("ocoAllowed"),
            "otoAllowed": obj.get("otoAllowed"),
            "quoteOrderQtyMarketAllowed": obj.get("quoteOrderQtyMarketAllowed"),
            "allowTrailingStop": obj.get("allowTrailingStop"),
            "cancelReplaceAllowed": obj.get("cancelReplaceAllowed"),
            "isSpotTradingAllowed": obj.get("isSpotTradingAllowed"),
            "isMarginTradingAllowed": obj.get("isMarginTradingAllowed"),
            "filters": [ApiV3ExchangeInfoGet200ResponseSymbolsInnerFiltersInner.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "permissions": obj.get("permissions"),
            "permissionSets": obj.get("permissionSets"),
            "defaultSelfTradePreventionMode": obj.get("defaultSelfTradePreventionMode"),
            "allowedSelfTradePreventionModes": obj.get("allowedSelfTradePreventionModes")
        })
        return _obj


