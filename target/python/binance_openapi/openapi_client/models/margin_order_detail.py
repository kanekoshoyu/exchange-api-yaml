# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class MarginOrderDetail(BaseModel):
    """
    MarginOrderDetail
    """ # noqa: E501
    client_order_id: StrictStr = Field(alias="clientOrderId")
    cummulative_quote_qty: StrictStr = Field(alias="cummulativeQuoteQty")
    executed_qty: StrictStr = Field(alias="executedQty")
    iceberg_qty: StrictStr = Field(alias="icebergQty")
    is_working: StrictBool = Field(alias="isWorking")
    order_id: StrictInt = Field(alias="orderId")
    orig_qty: StrictStr = Field(alias="origQty")
    price: StrictStr
    side: StrictStr
    status: StrictStr
    stop_price: StrictStr = Field(alias="stopPrice")
    symbol: StrictStr
    is_isolated: StrictBool = Field(alias="isIsolated")
    time: StrictInt
    time_in_force: StrictStr = Field(alias="timeInForce")
    type: StrictStr
    update_time: StrictInt = Field(alias="updateTime")
    self_trade_prevention_mode: StrictStr = Field(alias="selfTradePreventionMode")
    __properties: ClassVar[List[str]] = ["clientOrderId", "cummulativeQuoteQty", "executedQty", "icebergQty", "isWorking", "orderId", "origQty", "price", "side", "status", "stopPrice", "symbol", "isIsolated", "time", "timeInForce", "type", "updateTime", "selfTradePreventionMode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarginOrderDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarginOrderDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientOrderId": obj.get("clientOrderId"),
            "cummulativeQuoteQty": obj.get("cummulativeQuoteQty"),
            "executedQty": obj.get("executedQty"),
            "icebergQty": obj.get("icebergQty"),
            "isWorking": obj.get("isWorking"),
            "orderId": obj.get("orderId"),
            "origQty": obj.get("origQty"),
            "price": obj.get("price"),
            "side": obj.get("side"),
            "status": obj.get("status"),
            "stopPrice": obj.get("stopPrice"),
            "symbol": obj.get("symbol"),
            "isIsolated": obj.get("isIsolated"),
            "time": obj.get("time"),
            "timeInForce": obj.get("timeInForce"),
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime"),
            "selfTradePreventionMode": obj.get("selfTradePreventionMode")
        })
        return _obj


