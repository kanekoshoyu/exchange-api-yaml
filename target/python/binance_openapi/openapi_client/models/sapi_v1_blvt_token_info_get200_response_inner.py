# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.sapi_v1_blvt_token_info_get200_response_inner_current_baskets_inner import SapiV1BlvtTokenInfoGet200ResponseInnerCurrentBasketsInner
from typing import Optional, Set
from typing_extensions import Self

class SapiV1BlvtTokenInfoGet200ResponseInner(BaseModel):
    """
    SapiV1BlvtTokenInfoGet200ResponseInner
    """ # noqa: E501
    token_name: StrictStr = Field(alias="tokenName")
    description: StrictStr
    underlying: StrictStr
    token_issued: StrictStr = Field(alias="tokenIssued")
    basket: StrictStr
    current_baskets: List[SapiV1BlvtTokenInfoGet200ResponseInnerCurrentBasketsInner] = Field(alias="currentBaskets")
    nav: StrictStr
    real_leverage: StrictStr = Field(alias="realLeverage")
    funding_rate: StrictStr = Field(alias="fundingRate")
    daily_management_fee: StrictStr = Field(alias="dailyManagementFee")
    purchase_fee_pct: StrictStr = Field(alias="purchaseFeePct")
    daily_purchase_limit: StrictStr = Field(alias="dailyPurchaseLimit")
    redeem_fee_pct: StrictStr = Field(alias="redeemFeePct")
    daily_redeem_limit: StrictStr = Field(alias="dailyRedeemLimit")
    timestamp: StrictInt
    __properties: ClassVar[List[str]] = ["tokenName", "description", "underlying", "tokenIssued", "basket", "currentBaskets", "nav", "realLeverage", "fundingRate", "dailyManagementFee", "purchaseFeePct", "dailyPurchaseLimit", "redeemFeePct", "dailyRedeemLimit", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapiV1BlvtTokenInfoGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in current_baskets (list)
        _items = []
        if self.current_baskets:
            for _item in self.current_baskets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['currentBaskets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapiV1BlvtTokenInfoGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tokenName": obj.get("tokenName"),
            "description": obj.get("description"),
            "underlying": obj.get("underlying"),
            "tokenIssued": obj.get("tokenIssued"),
            "basket": obj.get("basket"),
            "currentBaskets": [SapiV1BlvtTokenInfoGet200ResponseInnerCurrentBasketsInner.from_dict(_item) for _item in obj["currentBaskets"]] if obj.get("currentBaskets") is not None else None,
            "nav": obj.get("nav"),
            "realLeverage": obj.get("realLeverage"),
            "fundingRate": obj.get("fundingRate"),
            "dailyManagementFee": obj.get("dailyManagementFee"),
            "purchaseFeePct": obj.get("purchaseFeePct"),
            "dailyPurchaseLimit": obj.get("dailyPurchaseLimit"),
            "redeemFeePct": obj.get("redeemFeePct"),
            "dailyRedeemLimit": obj.get("dailyRedeemLimit"),
            "timestamp": obj.get("timestamp")
        })
        return _obj


