# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SapiV1MarginBorrowRepayGet200ResponseRowsInner(BaseModel):
    """
    SapiV1MarginBorrowRepayGet200ResponseRowsInner
    """ # noqa: E501
    isolated_symbol: Optional[StrictStr] = Field(default=None, description="Isolated symbol, will not be returned for crossed margin", alias="isolatedSymbol")
    amount: Optional[StrictStr] = Field(default=None, description="Total amount borrowed/repaid")
    asset: StrictStr
    interest: Optional[StrictStr] = Field(default=None, description="Interest repaid")
    principal: StrictStr = Field(description="Principal repaid")
    status: StrictStr = Field(description="one of PENDING (pending execution), CONFIRMED (successfully execution), FAILED (execution failed, nothing happened to your account)")
    timestamp: StrictInt
    tx_id: StrictInt = Field(alias="txId")
    __properties: ClassVar[List[str]] = ["isolatedSymbol", "amount", "asset", "interest", "principal", "status", "timestamp", "txId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapiV1MarginBorrowRepayGet200ResponseRowsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapiV1MarginBorrowRepayGet200ResponseRowsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isolatedSymbol": obj.get("isolatedSymbol"),
            "amount": obj.get("amount"),
            "asset": obj.get("asset"),
            "interest": obj.get("interest"),
            "principal": obj.get("principal"),
            "status": obj.get("status"),
            "timestamp": obj.get("timestamp"),
            "txId": obj.get("txId")
        })
        return _obj


