# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class SapiV1LendingAutoInvestHistoryListGet200ResponseInner(BaseModel):
    """
    SapiV1LendingAutoInvestHistoryListGet200ResponseInner
    """ # noqa: E501
    id: StrictInt
    target_asset: StrictStr = Field(alias="targetAsset")
    plan_type: StrictStr = Field(alias="planType")
    plan_name: StrictStr = Field(alias="planName")
    plan_id: StrictInt = Field(alias="planId")
    transaction_date_time: StrictInt = Field(alias="transactionDateTime")
    transaction_status: StrictStr = Field(alias="transactionStatus")
    failed_type: StrictStr = Field(alias="failedType")
    source_asset: StrictStr = Field(alias="sourceAsset")
    source_asset_amount: StrictStr = Field(alias="sourceAssetAmount")
    target_asset_amount: StrictStr = Field(alias="targetAssetAmount")
    source_wallet: StrictStr = Field(alias="sourceWallet")
    flexible_used: StrictStr = Field(alias="flexibleUsed")
    transaction_fee: StrictStr = Field(alias="transactionFee")
    transaction_fee_unit: StrictStr = Field(alias="transactionFeeUnit")
    execution_price: StrictStr = Field(alias="executionPrice")
    execution_type: StrictStr = Field(alias="executionType")
    subscription_cycle: StrictStr = Field(alias="subscriptionCycle")
    __properties: ClassVar[List[str]] = ["id", "targetAsset", "planType", "planName", "planId", "transactionDateTime", "transactionStatus", "failedType", "sourceAsset", "sourceAssetAmount", "targetAssetAmount", "sourceWallet", "flexibleUsed", "transactionFee", "transactionFeeUnit", "executionPrice", "executionType", "subscriptionCycle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapiV1LendingAutoInvestHistoryListGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapiV1LendingAutoInvestHistoryListGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "targetAsset": obj.get("targetAsset"),
            "planType": obj.get("planType"),
            "planName": obj.get("planName"),
            "planId": obj.get("planId"),
            "transactionDateTime": obj.get("transactionDateTime"),
            "transactionStatus": obj.get("transactionStatus"),
            "failedType": obj.get("failedType"),
            "sourceAsset": obj.get("sourceAsset"),
            "sourceAssetAmount": obj.get("sourceAssetAmount"),
            "targetAssetAmount": obj.get("targetAssetAmount"),
            "sourceWallet": obj.get("sourceWallet"),
            "flexibleUsed": obj.get("flexibleUsed"),
            "transactionFee": obj.get("transactionFee"),
            "transactionFeeUnit": obj.get("transactionFeeUnit"),
            "executionPrice": obj.get("executionPrice"),
            "executionType": obj.get("executionType"),
            "subscriptionCycle": obj.get("subscriptionCycle")
        })
        return _obj


