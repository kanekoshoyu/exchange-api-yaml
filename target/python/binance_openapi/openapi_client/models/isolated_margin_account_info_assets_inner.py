# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.isolated_margin_account_info_assets_inner_base_asset import IsolatedMarginAccountInfoAssetsInnerBaseAsset
from openapi_client.models.isolated_margin_account_info_assets_inner_quote_asset import IsolatedMarginAccountInfoAssetsInnerQuoteAsset
from typing import Optional, Set
from typing_extensions import Self

class IsolatedMarginAccountInfoAssetsInner(BaseModel):
    """
    IsolatedMarginAccountInfoAssetsInner
    """ # noqa: E501
    base_asset: IsolatedMarginAccountInfoAssetsInnerBaseAsset = Field(alias="baseAsset")
    quote_asset: IsolatedMarginAccountInfoAssetsInnerQuoteAsset = Field(alias="quoteAsset")
    symbol: StrictStr
    isolated_created: StrictBool = Field(alias="isolatedCreated")
    enabled: StrictBool = Field(description="true-enabled, false-disabled")
    margin_level: StrictStr = Field(alias="marginLevel")
    margin_level_status: StrictStr = Field(description="\"EXCESSIVE\", \"NORMAL\", \"MARGIN_CALL\", \"PRE_LIQUIDATION\", \"FORCE_LIQUIDATION\"", alias="marginLevelStatus")
    margin_ratio: StrictStr = Field(alias="marginRatio")
    index_price: StrictStr = Field(alias="indexPrice")
    liquidate_price: StrictStr = Field(alias="liquidatePrice")
    liquidate_rate: StrictStr = Field(alias="liquidateRate")
    trade_enabled: StrictBool = Field(alias="tradeEnabled")
    __properties: ClassVar[List[str]] = ["baseAsset", "quoteAsset", "symbol", "isolatedCreated", "enabled", "marginLevel", "marginLevelStatus", "marginRatio", "indexPrice", "liquidatePrice", "liquidateRate", "tradeEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IsolatedMarginAccountInfoAssetsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of base_asset
        if self.base_asset:
            _dict['baseAsset'] = self.base_asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quote_asset
        if self.quote_asset:
            _dict['quoteAsset'] = self.quote_asset.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IsolatedMarginAccountInfoAssetsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseAsset": IsolatedMarginAccountInfoAssetsInnerBaseAsset.from_dict(obj["baseAsset"]) if obj.get("baseAsset") is not None else None,
            "quoteAsset": IsolatedMarginAccountInfoAssetsInnerQuoteAsset.from_dict(obj["quoteAsset"]) if obj.get("quoteAsset") is not None else None,
            "symbol": obj.get("symbol"),
            "isolatedCreated": obj.get("isolatedCreated"),
            "enabled": obj.get("enabled"),
            "marginLevel": obj.get("marginLevel"),
            "marginLevelStatus": obj.get("marginLevelStatus"),
            "marginRatio": obj.get("marginRatio"),
            "indexPrice": obj.get("indexPrice"),
            "liquidatePrice": obj.get("liquidatePrice"),
            "liquidateRate": obj.get("liquidateRate"),
            "tradeEnabled": obj.get("tradeEnabled")
        })
        return _obj


