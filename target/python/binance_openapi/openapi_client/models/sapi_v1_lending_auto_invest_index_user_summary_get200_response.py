# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.sapi_v1_lending_auto_invest_index_user_summary_get200_response_asset_allocation_inner import SapiV1LendingAutoInvestIndexUserSummaryGet200ResponseAssetAllocationInner
from openapi_client.models.sapi_v1_lending_auto_invest_index_user_summary_get200_response_details_inner import SapiV1LendingAutoInvestIndexUserSummaryGet200ResponseDetailsInner
from typing import Optional, Set
from typing_extensions import Self

class SapiV1LendingAutoInvestIndexUserSummaryGet200Response(BaseModel):
    """
    SapiV1LendingAutoInvestIndexUserSummaryGet200Response
    """ # noqa: E501
    index_id: StrictInt = Field(alias="indexId")
    total_invested_in_usd: StrictStr = Field(alias="totalInvestedInUSD")
    current_invested_in_usd: StrictStr = Field(description="current invest", alias="currentInvestedInUSD")
    pnl_in_usd: StrictStr = Field(description="PNL of the plan in USD based on current amount", alias="pnlInUSD")
    roi: StrictStr = Field(description="ROI of the plan based on current amount")
    asset_allocation: List[SapiV1LendingAutoInvestIndexUserSummaryGet200ResponseAssetAllocationInner] = Field(alias="assetAllocation")
    details: List[SapiV1LendingAutoInvestIndexUserSummaryGet200ResponseDetailsInner]
    __properties: ClassVar[List[str]] = ["indexId", "totalInvestedInUSD", "currentInvestedInUSD", "pnlInUSD", "roi", "assetAllocation", "details"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapiV1LendingAutoInvestIndexUserSummaryGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in asset_allocation (list)
        _items = []
        if self.asset_allocation:
            for _item in self.asset_allocation:
                if _item:
                    _items.append(_item.to_dict())
            _dict['assetAllocation'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item in self.details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapiV1LendingAutoInvestIndexUserSummaryGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "indexId": obj.get("indexId"),
            "totalInvestedInUSD": obj.get("totalInvestedInUSD"),
            "currentInvestedInUSD": obj.get("currentInvestedInUSD"),
            "pnlInUSD": obj.get("pnlInUSD"),
            "roi": obj.get("roi"),
            "assetAllocation": [SapiV1LendingAutoInvestIndexUserSummaryGet200ResponseAssetAllocationInner.from_dict(_item) for _item in obj["assetAllocation"]] if obj.get("assetAllocation") is not None else None,
            "details": [SapiV1LendingAutoInvestIndexUserSummaryGet200ResponseDetailsInner.from_dict(_item) for _item in obj["details"]] if obj.get("details") is not None else None
        })
        return _obj


