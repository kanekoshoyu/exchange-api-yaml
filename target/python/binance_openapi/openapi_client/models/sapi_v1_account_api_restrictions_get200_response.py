# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SapiV1AccountApiRestrictionsGet200Response(BaseModel):
    """
    SapiV1AccountApiRestrictionsGet200Response
    """ # noqa: E501
    ip_restrict: StrictBool = Field(alias="ipRestrict")
    create_time: StrictInt = Field(alias="createTime")
    enable_internal_transfer: StrictBool = Field(description="This option authorizes this key to transfer funds between your master account and your sub account instantly", alias="enableInternalTransfer")
    enable_futures: StrictBool = Field(description="API Key created before your futures account opened does not support futures API service", alias="enableFutures")
    enable_portfolio_margin_trading: Optional[StrictBool] = Field(default=None, description="API Key created before your activate portfolio margin does not support portfolio margin API service", alias="enablePortfolioMarginTrading")
    enable_vanilla_options: StrictBool = Field(description="Authorizes this key to Vanilla options trading", alias="enableVanillaOptions")
    permits_universal_transfer: StrictBool = Field(description="Authorizes this key to be used for a dedicated universal transfer API to transfer multiple supported currencies. Each business's own transfer API rights are not affected by this authorization", alias="permitsUniversalTransfer")
    enable_reading: StrictBool = Field(alias="enableReading")
    enable_spot_and_margin_trading: StrictBool = Field(alias="enableSpotAndMarginTrading")
    enable_withdrawals: StrictBool = Field(description="This option allows you to withdraw via API. You must apply the IP Access Restriction filter in order to enable withdrawals", alias="enableWithdrawals")
    enable_margin: StrictBool = Field(description="This option can be adjusted after the Cross Margin account transfer is completed", alias="enableMargin")
    trading_authority_expiration_time: StrictInt = Field(description="Expiration time for spot and margin trading permission", alias="tradingAuthorityExpirationTime")
    __properties: ClassVar[List[str]] = ["ipRestrict", "createTime", "enableInternalTransfer", "enableFutures", "enablePortfolioMarginTrading", "enableVanillaOptions", "permitsUniversalTransfer", "enableReading", "enableSpotAndMarginTrading", "enableWithdrawals", "enableMargin", "tradingAuthorityExpirationTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapiV1AccountApiRestrictionsGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapiV1AccountApiRestrictionsGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ipRestrict": obj.get("ipRestrict"),
            "createTime": obj.get("createTime"),
            "enableInternalTransfer": obj.get("enableInternalTransfer"),
            "enableFutures": obj.get("enableFutures"),
            "enablePortfolioMarginTrading": obj.get("enablePortfolioMarginTrading"),
            "enableVanillaOptions": obj.get("enableVanillaOptions"),
            "permitsUniversalTransfer": obj.get("permitsUniversalTransfer"),
            "enableReading": obj.get("enableReading"),
            "enableSpotAndMarginTrading": obj.get("enableSpotAndMarginTrading"),
            "enableWithdrawals": obj.get("enableWithdrawals"),
            "enableMargin": obj.get("enableMargin"),
            "tradingAuthorityExpirationTime": obj.get("tradingAuthorityExpirationTime")
        })
        return _obj


