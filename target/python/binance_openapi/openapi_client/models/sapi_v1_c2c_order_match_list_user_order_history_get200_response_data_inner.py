# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class SapiV1C2cOrderMatchListUserOrderHistoryGet200ResponseDataInner(BaseModel):
    """
    SapiV1C2cOrderMatchListUserOrderHistoryGet200ResponseDataInner
    """ # noqa: E501
    order_number: StrictStr = Field(alias="orderNumber")
    adv_no: StrictStr = Field(alias="advNo")
    trade_type: StrictStr = Field(alias="tradeType")
    asset: StrictStr
    fiat: StrictStr
    fiat_symbol: StrictStr = Field(alias="fiatSymbol")
    amount: StrictStr = Field(description="Quantity (in Crypto)")
    total_price: StrictStr = Field(alias="totalPrice")
    unit_price: StrictStr = Field(description="Unit Price (in Fiat)", alias="unitPrice")
    order_status: StrictStr = Field(description="PENDING, TRADING, BUYER_PAYED, DISTRIBUTING, COMPLETED, IN_APPEAL, CANCELLED, CANCELLED_BY_SYSTEM", alias="orderStatus")
    create_time: StrictInt = Field(alias="createTime")
    commission: StrictStr = Field(description="Transaction Fee (in Crypto)")
    counter_part_nick_name: StrictStr = Field(alias="counterPartNickName")
    advertisement_role: StrictStr = Field(alias="advertisementRole")
    __properties: ClassVar[List[str]] = ["orderNumber", "advNo", "tradeType", "asset", "fiat", "fiatSymbol", "amount", "totalPrice", "unitPrice", "orderStatus", "createTime", "commission", "counterPartNickName", "advertisementRole"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapiV1C2cOrderMatchListUserOrderHistoryGet200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapiV1C2cOrderMatchListUserOrderHistoryGet200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderNumber": obj.get("orderNumber"),
            "advNo": obj.get("advNo"),
            "tradeType": obj.get("tradeType"),
            "asset": obj.get("asset"),
            "fiat": obj.get("fiat"),
            "fiatSymbol": obj.get("fiatSymbol"),
            "amount": obj.get("amount"),
            "totalPrice": obj.get("totalPrice"),
            "unitPrice": obj.get("unitPrice"),
            "orderStatus": obj.get("orderStatus"),
            "createTime": obj.get("createTime"),
            "commission": obj.get("commission"),
            "counterPartNickName": obj.get("counterPartNickName"),
            "advertisementRole": obj.get("advertisementRole")
        })
        return _obj


