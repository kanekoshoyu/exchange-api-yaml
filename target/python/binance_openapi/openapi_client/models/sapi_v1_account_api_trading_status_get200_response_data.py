# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List
from openapi_client.models.sapi_v1_account_api_trading_status_get200_response_data_indicators import SapiV1AccountApiTradingStatusGet200ResponseDataIndicators
from openapi_client.models.sapi_v1_account_api_trading_status_get200_response_data_trigger_condition import SapiV1AccountApiTradingStatusGet200ResponseDataTriggerCondition
from typing import Optional, Set
from typing_extensions import Self

class SapiV1AccountApiTradingStatusGet200ResponseData(BaseModel):
    """
    SapiV1AccountApiTradingStatusGet200ResponseData
    """ # noqa: E501
    is_locked: StrictBool = Field(description="API trading function is locked or not", alias="isLocked")
    planned_recover_time: StrictInt = Field(description="If API trading function is locked, this is the planned recover time", alias="plannedRecoverTime")
    trigger_condition: SapiV1AccountApiTradingStatusGet200ResponseDataTriggerCondition = Field(alias="triggerCondition")
    indicators: SapiV1AccountApiTradingStatusGet200ResponseDataIndicators
    update_time: StrictInt = Field(alias="updateTime")
    __properties: ClassVar[List[str]] = ["isLocked", "plannedRecoverTime", "triggerCondition", "indicators", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapiV1AccountApiTradingStatusGet200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of trigger_condition
        if self.trigger_condition:
            _dict['triggerCondition'] = self.trigger_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of indicators
        if self.indicators:
            _dict['indicators'] = self.indicators.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapiV1AccountApiTradingStatusGet200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isLocked": obj.get("isLocked"),
            "plannedRecoverTime": obj.get("plannedRecoverTime"),
            "triggerCondition": SapiV1AccountApiTradingStatusGet200ResponseDataTriggerCondition.from_dict(obj["triggerCondition"]) if obj.get("triggerCondition") is not None else None,
            "indicators": SapiV1AccountApiTradingStatusGet200ResponseDataIndicators.from_dict(obj["indicators"]) if obj.get("indicators") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj


