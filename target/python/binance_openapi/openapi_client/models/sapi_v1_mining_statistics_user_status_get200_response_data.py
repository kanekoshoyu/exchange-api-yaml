# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.sapi_v1_mining_statistics_user_status_get200_response_data_profit_today import SapiV1MiningStatisticsUserStatusGet200ResponseDataProfitToday
from typing import Optional, Set
from typing_extensions import Self

class SapiV1MiningStatisticsUserStatusGet200ResponseData(BaseModel):
    """
    SapiV1MiningStatisticsUserStatusGet200ResponseData
    """ # noqa: E501
    fifteen_min_hash_rate: StrictStr = Field(alias="fifteenMinHashRate")
    day_hash_rate: StrictStr = Field(alias="dayHashRate")
    valid_num: StrictInt = Field(alias="validNum")
    invalid_num: StrictInt = Field(alias="invalidNum")
    profit_today: SapiV1MiningStatisticsUserStatusGet200ResponseDataProfitToday = Field(alias="profitToday")
    profit_yesterday: SapiV1MiningStatisticsUserStatusGet200ResponseDataProfitToday = Field(alias="profitYesterday")
    user_name: StrictStr = Field(alias="userName")
    unit: StrictStr
    algo: StrictStr
    __properties: ClassVar[List[str]] = ["fifteenMinHashRate", "dayHashRate", "validNum", "invalidNum", "profitToday", "profitYesterday", "userName", "unit", "algo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapiV1MiningStatisticsUserStatusGet200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of profit_today
        if self.profit_today:
            _dict['profitToday'] = self.profit_today.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profit_yesterday
        if self.profit_yesterday:
            _dict['profitYesterday'] = self.profit_yesterday.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapiV1MiningStatisticsUserStatusGet200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fifteenMinHashRate": obj.get("fifteenMinHashRate"),
            "dayHashRate": obj.get("dayHashRate"),
            "validNum": obj.get("validNum"),
            "invalidNum": obj.get("invalidNum"),
            "profitToday": SapiV1MiningStatisticsUserStatusGet200ResponseDataProfitToday.from_dict(obj["profitToday"]) if obj.get("profitToday") is not None else None,
            "profitYesterday": SapiV1MiningStatisticsUserStatusGet200ResponseDataProfitToday.from_dict(obj["profitYesterday"]) if obj.get("profitYesterday") is not None else None,
            "userName": obj.get("userName"),
            "unit": obj.get("unit"),
            "algo": obj.get("algo")
        })
        return _obj


