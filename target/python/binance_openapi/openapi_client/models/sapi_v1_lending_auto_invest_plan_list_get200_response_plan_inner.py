# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class SapiV1LendingAutoInvestPlanListGet200ResponsePlanInner(BaseModel):
    """
    SapiV1LendingAutoInvestPlanListGet200ResponsePlanInner
    """ # noqa: E501
    plan_id: StrictInt = Field(alias="planId")
    plan_type: StrictStr = Field(alias="planType")
    edit_allowed: StrictStr = Field(alias="editAllowed")
    creation_date_time: StrictInt = Field(alias="creationDateTime")
    first_execution_date_time: StrictInt = Field(alias="firstExecutionDateTime")
    next_execution_date_time: StrictInt = Field(alias="nextExecutionDateTime")
    status: StrictStr
    last_updated_date_time: StrictInt = Field(alias="lastUpdatedDateTime")
    target_asset: StrictStr = Field(alias="targetAsset")
    total_target_amount: StrictStr = Field(alias="totalTargetAmount")
    source_asset: StrictStr = Field(alias="sourceAsset")
    total_invested_in_usd: StrictStr = Field(alias="totalInvestedInUSD")
    subscription_amount: StrictStr = Field(alias="subscriptionAmount")
    subscription_cycle: StrictStr = Field(alias="subscriptionCycle")
    subscription_start_day: StrictStr = Field(alias="subscriptionStartDay")
    subscription_start_weekday: StrictStr = Field(alias="subscriptionStartWeekday")
    subscription_start_time: StrictStr = Field(alias="subscriptionStartTime")
    source_wallet: StrictStr = Field(alias="sourceWallet")
    flexible_allowed_to_use: StrictStr = Field(alias="flexibleAllowedToUse")
    plan_value_in_usd: StrictStr = Field(alias="planValueInUSD")
    pnl_in_usd: StrictStr = Field(alias="pnlInUSD")
    roi: StrictStr
    __properties: ClassVar[List[str]] = ["planId", "planType", "editAllowed", "creationDateTime", "firstExecutionDateTime", "nextExecutionDateTime", "status", "lastUpdatedDateTime", "targetAsset", "totalTargetAmount", "sourceAsset", "totalInvestedInUSD", "subscriptionAmount", "subscriptionCycle", "subscriptionStartDay", "subscriptionStartWeekday", "subscriptionStartTime", "sourceWallet", "flexibleAllowedToUse", "planValueInUSD", "pnlInUSD", "roi"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapiV1LendingAutoInvestPlanListGet200ResponsePlanInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapiV1LendingAutoInvestPlanListGet200ResponsePlanInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "planId": obj.get("planId"),
            "planType": obj.get("planType"),
            "editAllowed": obj.get("editAllowed"),
            "creationDateTime": obj.get("creationDateTime"),
            "firstExecutionDateTime": obj.get("firstExecutionDateTime"),
            "nextExecutionDateTime": obj.get("nextExecutionDateTime"),
            "status": obj.get("status"),
            "lastUpdatedDateTime": obj.get("lastUpdatedDateTime"),
            "targetAsset": obj.get("targetAsset"),
            "totalTargetAmount": obj.get("totalTargetAmount"),
            "sourceAsset": obj.get("sourceAsset"),
            "totalInvestedInUSD": obj.get("totalInvestedInUSD"),
            "subscriptionAmount": obj.get("subscriptionAmount"),
            "subscriptionCycle": obj.get("subscriptionCycle"),
            "subscriptionStartDay": obj.get("subscriptionStartDay"),
            "subscriptionStartWeekday": obj.get("subscriptionStartWeekday"),
            "subscriptionStartTime": obj.get("subscriptionStartTime"),
            "sourceWallet": obj.get("sourceWallet"),
            "flexibleAllowedToUse": obj.get("flexibleAllowedToUse"),
            "planValueInUSD": obj.get("planValueInUSD"),
            "pnlInUSD": obj.get("pnlInUSD"),
            "roi": obj.get("roi")
        })
        return _obj


