# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class SapiV1LoanRepayHistoryGet200ResponseRowsInner(BaseModel):
    """
    SapiV1LoanRepayHistoryGet200ResponseRowsInner
    """ # noqa: E501
    loan_coin: StrictStr = Field(alias="loanCoin")
    repay_amount: StrictStr = Field(alias="repayAmount")
    collateral_coin: StrictStr = Field(alias="collateralCoin")
    collateral_used: StrictStr = Field(alias="collateralUsed")
    collateral_return: StrictStr = Field(alias="collateralReturn")
    repay_type: StrictStr = Field(alias="repayType")
    repay_status: StrictStr = Field(description="'repayType': '1' // 1 for 'repay with borrowed coin', 2 for 'repay with collateral' 'repayStatus': 'Repaid' // Repaid, Repaying, Failed", alias="repayStatus")
    repay_time: StrictInt = Field(alias="repayTime")
    order_id: StrictInt = Field(alias="orderId")
    __properties: ClassVar[List[str]] = ["loanCoin", "repayAmount", "collateralCoin", "collateralUsed", "collateralReturn", "repayType", "repayStatus", "repayTime", "orderId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapiV1LoanRepayHistoryGet200ResponseRowsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapiV1LoanRepayHistoryGet200ResponseRowsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "loanCoin": obj.get("loanCoin"),
            "repayAmount": obj.get("repayAmount"),
            "collateralCoin": obj.get("collateralCoin"),
            "collateralUsed": obj.get("collateralUsed"),
            "collateralReturn": obj.get("collateralReturn"),
            "repayType": obj.get("repayType"),
            "repayStatus": obj.get("repayStatus"),
            "repayTime": obj.get("repayTime"),
            "orderId": obj.get("orderId")
        })
        return _obj


