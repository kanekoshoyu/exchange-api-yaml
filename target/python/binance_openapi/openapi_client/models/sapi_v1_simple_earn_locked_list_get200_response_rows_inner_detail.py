# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class SapiV1SimpleEarnLockedListGet200ResponseRowsInnerDetail(BaseModel):
    """
    SapiV1SimpleEarnLockedListGet200ResponseRowsInnerDetail
    """ # noqa: E501
    asset: StrictStr
    reward_asset: StrictStr = Field(alias="rewardAsset")
    duration: StrictInt
    renewable: StrictBool
    is_sold_out: StrictBool = Field(alias="isSoldOut")
    apr: StrictStr
    status: StrictStr
    subscription_start_time: StrictStr = Field(alias="subscriptionStartTime")
    extra_reward_asset: StrictStr = Field(alias="extraRewardAsset")
    extra_reward_apr: StrictStr = Field(alias="extraRewardAPR")
    __properties: ClassVar[List[str]] = ["asset", "rewardAsset", "duration", "renewable", "isSoldOut", "apr", "status", "subscriptionStartTime", "extraRewardAsset", "extraRewardAPR"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SapiV1SimpleEarnLockedListGet200ResponseRowsInnerDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SapiV1SimpleEarnLockedListGet200ResponseRowsInnerDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset": obj.get("asset"),
            "rewardAsset": obj.get("rewardAsset"),
            "duration": obj.get("duration"),
            "renewable": obj.get("renewable"),
            "isSoldOut": obj.get("isSoldOut"),
            "apr": obj.get("apr"),
            "status": obj.get("status"),
            "subscriptionStartTime": obj.get("subscriptionStartTime"),
            "extraRewardAsset": obj.get("extraRewardAsset"),
            "extraRewardAPR": obj.get("extraRewardAPR")
        })
        return _obj


