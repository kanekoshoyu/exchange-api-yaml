# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.sapi_v1_convert_accept_quote_post200_response import SapiV1ConvertAcceptQuotePost200Response
from openapi_client.models.sapi_v1_convert_asset_info_get200_response_inner import SapiV1ConvertAssetInfoGet200ResponseInner
from openapi_client.models.sapi_v1_convert_exchange_info_get200_response_inner import SapiV1ConvertExchangeInfoGet200ResponseInner
from openapi_client.models.sapi_v1_convert_get_quote_post200_response import SapiV1ConvertGetQuotePost200Response
from openapi_client.models.sapi_v1_convert_limit_cancel_order_post200_response import SapiV1ConvertLimitCancelOrderPost200Response
from openapi_client.models.sapi_v1_convert_limit_place_order_post200_response import SapiV1ConvertLimitPlaceOrderPost200Response
from openapi_client.models.sapi_v1_convert_limit_query_open_orders_get200_response import SapiV1ConvertLimitQueryOpenOrdersGet200Response
from openapi_client.models.sapi_v1_convert_order_status_get200_response import SapiV1ConvertOrderStatusGet200Response
from openapi_client.models.sapi_v1_convert_trade_flow_get200_response import SapiV1ConvertTradeFlowGet200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ConvertApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def sapi_v1_convert_accept_quote_post(
        self,
        quote_id: StrictStr,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SapiV1ConvertAcceptQuotePost200Response:
        """Accept Quote (TRADE)

        Accept the offered quote by quote ID.  Weight(UID): 500

        :param quote_id: (required)
        :type quote_id: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_accept_quote_post_serialize(
            quote_id=quote_id,
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertAcceptQuotePost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sapi_v1_convert_accept_quote_post_with_http_info(
        self,
        quote_id: StrictStr,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SapiV1ConvertAcceptQuotePost200Response]:
        """Accept Quote (TRADE)

        Accept the offered quote by quote ID.  Weight(UID): 500

        :param quote_id: (required)
        :type quote_id: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_accept_quote_post_serialize(
            quote_id=quote_id,
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertAcceptQuotePost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sapi_v1_convert_accept_quote_post_without_preload_content(
        self,
        quote_id: StrictStr,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Accept Quote (TRADE)

        Accept the offered quote by quote ID.  Weight(UID): 500

        :param quote_id: (required)
        :type quote_id: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_accept_quote_post_serialize(
            quote_id=quote_id,
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertAcceptQuotePost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sapi_v1_convert_accept_quote_post_serialize(
        self,
        quote_id,
        timestamp,
        signature,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if quote_id is not None:
            
            _query_params.append(('quoteId', quote_id))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/sapi/v1/convert/acceptQuote',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sapi_v1_convert_asset_info_get(
        self,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SapiV1ConvertAssetInfoGet200ResponseInner]:
        """Query order quantity precision per asset (USER_DATA)

        Query for supported asset precision information  Weight(IP): 100

        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_asset_info_get_serialize(
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SapiV1ConvertAssetInfoGet200ResponseInner]",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sapi_v1_convert_asset_info_get_with_http_info(
        self,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SapiV1ConvertAssetInfoGet200ResponseInner]]:
        """Query order quantity precision per asset (USER_DATA)

        Query for supported asset precision information  Weight(IP): 100

        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_asset_info_get_serialize(
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SapiV1ConvertAssetInfoGet200ResponseInner]",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sapi_v1_convert_asset_info_get_without_preload_content(
        self,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query order quantity precision per asset (USER_DATA)

        Query for supported asset precision information  Weight(IP): 100

        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_asset_info_get_serialize(
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SapiV1ConvertAssetInfoGet200ResponseInner]",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sapi_v1_convert_asset_info_get_serialize(
        self,
        timestamp,
        signature,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/convert/assetInfo',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sapi_v1_convert_exchange_info_get(
        self,
        from_asset: Annotated[Optional[StrictStr], Field(description="User spends coin")] = None,
        to_asset: Annotated[Optional[StrictStr], Field(description="User receives coin")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SapiV1ConvertExchangeInfoGet200ResponseInner]:
        """List All Convert Pairs

        Query for all convertible token pairs and the tokens’ respective upper/lower limits  Weight(IP): 3000

        :param from_asset: User spends coin
        :type from_asset: str
        :param to_asset: User receives coin
        :type to_asset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_exchange_info_get_serialize(
            from_asset=from_asset,
            to_asset=to_asset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SapiV1ConvertExchangeInfoGet200ResponseInner]",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sapi_v1_convert_exchange_info_get_with_http_info(
        self,
        from_asset: Annotated[Optional[StrictStr], Field(description="User spends coin")] = None,
        to_asset: Annotated[Optional[StrictStr], Field(description="User receives coin")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SapiV1ConvertExchangeInfoGet200ResponseInner]]:
        """List All Convert Pairs

        Query for all convertible token pairs and the tokens’ respective upper/lower limits  Weight(IP): 3000

        :param from_asset: User spends coin
        :type from_asset: str
        :param to_asset: User receives coin
        :type to_asset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_exchange_info_get_serialize(
            from_asset=from_asset,
            to_asset=to_asset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SapiV1ConvertExchangeInfoGet200ResponseInner]",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sapi_v1_convert_exchange_info_get_without_preload_content(
        self,
        from_asset: Annotated[Optional[StrictStr], Field(description="User spends coin")] = None,
        to_asset: Annotated[Optional[StrictStr], Field(description="User receives coin")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List All Convert Pairs

        Query for all convertible token pairs and the tokens’ respective upper/lower limits  Weight(IP): 3000

        :param from_asset: User spends coin
        :type from_asset: str
        :param to_asset: User receives coin
        :type to_asset: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_exchange_info_get_serialize(
            from_asset=from_asset,
            to_asset=to_asset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SapiV1ConvertExchangeInfoGet200ResponseInner]",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sapi_v1_convert_exchange_info_get_serialize(
        self,
        from_asset,
        to_asset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if from_asset is not None:
            
            _query_params.append(('fromAsset', from_asset))
            
        if to_asset is not None:
            
            _query_params.append(('toAsset', to_asset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/convert/exchangeInfo',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sapi_v1_convert_get_quote_post(
        self,
        from_asset: StrictStr,
        to_asset: StrictStr,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        from_amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="When specified, it is the amount you will be debited after the conversion")] = None,
        to_amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="When specified, it is the amount you will be debited after the conversion")] = None,
        valid_time: Annotated[Optional[StrictStr], Field(description="10s, 30s, 1m, 2m, default 10s")] = None,
        wallet_type: Annotated[Optional[StrictStr], Field(description="SPOT or FUNDING. Default is SPOT")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SapiV1ConvertGetQuotePost200Response:
        """Send quote request (USER_DATA)

        Request a quote for the requested token pairs  Weight(UID): 200

        :param from_asset: (required)
        :type from_asset: str
        :param to_asset: (required)
        :type to_asset: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param from_amount: When specified, it is the amount you will be debited after the conversion
        :type from_amount: float
        :param to_amount: When specified, it is the amount you will be debited after the conversion
        :type to_amount: float
        :param valid_time: 10s, 30s, 1m, 2m, default 10s
        :type valid_time: str
        :param wallet_type: SPOT or FUNDING. Default is SPOT
        :type wallet_type: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_get_quote_post_serialize(
            from_asset=from_asset,
            to_asset=to_asset,
            timestamp=timestamp,
            signature=signature,
            from_amount=from_amount,
            to_amount=to_amount,
            valid_time=valid_time,
            wallet_type=wallet_type,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertGetQuotePost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sapi_v1_convert_get_quote_post_with_http_info(
        self,
        from_asset: StrictStr,
        to_asset: StrictStr,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        from_amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="When specified, it is the amount you will be debited after the conversion")] = None,
        to_amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="When specified, it is the amount you will be debited after the conversion")] = None,
        valid_time: Annotated[Optional[StrictStr], Field(description="10s, 30s, 1m, 2m, default 10s")] = None,
        wallet_type: Annotated[Optional[StrictStr], Field(description="SPOT or FUNDING. Default is SPOT")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SapiV1ConvertGetQuotePost200Response]:
        """Send quote request (USER_DATA)

        Request a quote for the requested token pairs  Weight(UID): 200

        :param from_asset: (required)
        :type from_asset: str
        :param to_asset: (required)
        :type to_asset: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param from_amount: When specified, it is the amount you will be debited after the conversion
        :type from_amount: float
        :param to_amount: When specified, it is the amount you will be debited after the conversion
        :type to_amount: float
        :param valid_time: 10s, 30s, 1m, 2m, default 10s
        :type valid_time: str
        :param wallet_type: SPOT or FUNDING. Default is SPOT
        :type wallet_type: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_get_quote_post_serialize(
            from_asset=from_asset,
            to_asset=to_asset,
            timestamp=timestamp,
            signature=signature,
            from_amount=from_amount,
            to_amount=to_amount,
            valid_time=valid_time,
            wallet_type=wallet_type,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertGetQuotePost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sapi_v1_convert_get_quote_post_without_preload_content(
        self,
        from_asset: StrictStr,
        to_asset: StrictStr,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        from_amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="When specified, it is the amount you will be debited after the conversion")] = None,
        to_amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="When specified, it is the amount you will be debited after the conversion")] = None,
        valid_time: Annotated[Optional[StrictStr], Field(description="10s, 30s, 1m, 2m, default 10s")] = None,
        wallet_type: Annotated[Optional[StrictStr], Field(description="SPOT or FUNDING. Default is SPOT")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Send quote request (USER_DATA)

        Request a quote for the requested token pairs  Weight(UID): 200

        :param from_asset: (required)
        :type from_asset: str
        :param to_asset: (required)
        :type to_asset: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param from_amount: When specified, it is the amount you will be debited after the conversion
        :type from_amount: float
        :param to_amount: When specified, it is the amount you will be debited after the conversion
        :type to_amount: float
        :param valid_time: 10s, 30s, 1m, 2m, default 10s
        :type valid_time: str
        :param wallet_type: SPOT or FUNDING. Default is SPOT
        :type wallet_type: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_get_quote_post_serialize(
            from_asset=from_asset,
            to_asset=to_asset,
            timestamp=timestamp,
            signature=signature,
            from_amount=from_amount,
            to_amount=to_amount,
            valid_time=valid_time,
            wallet_type=wallet_type,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertGetQuotePost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sapi_v1_convert_get_quote_post_serialize(
        self,
        from_asset,
        to_asset,
        timestamp,
        signature,
        from_amount,
        to_amount,
        valid_time,
        wallet_type,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if from_asset is not None:
            
            _query_params.append(('fromAsset', from_asset))
            
        if to_asset is not None:
            
            _query_params.append(('toAsset', to_asset))
            
        if from_amount is not None:
            
            _query_params.append(('fromAmount', from_amount))
            
        if to_amount is not None:
            
            _query_params.append(('toAmount', to_amount))
            
        if valid_time is not None:
            
            _query_params.append(('validTime', valid_time))
            
        if wallet_type is not None:
            
            _query_params.append(('walletType', wallet_type))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/sapi/v1/convert/getQuote',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sapi_v1_convert_limit_cancel_order_post(
        self,
        order_id: StrictInt,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SapiV1ConvertLimitCancelOrderPost200Response:
        """Cancel limit order (USER_DATA)

        Enable users to cancel a limit order  Weight(UID): 200

        :param order_id: (required)
        :type order_id: int
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_limit_cancel_order_post_serialize(
            order_id=order_id,
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertLimitCancelOrderPost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sapi_v1_convert_limit_cancel_order_post_with_http_info(
        self,
        order_id: StrictInt,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SapiV1ConvertLimitCancelOrderPost200Response]:
        """Cancel limit order (USER_DATA)

        Enable users to cancel a limit order  Weight(UID): 200

        :param order_id: (required)
        :type order_id: int
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_limit_cancel_order_post_serialize(
            order_id=order_id,
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertLimitCancelOrderPost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sapi_v1_convert_limit_cancel_order_post_without_preload_content(
        self,
        order_id: StrictInt,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Cancel limit order (USER_DATA)

        Enable users to cancel a limit order  Weight(UID): 200

        :param order_id: (required)
        :type order_id: int
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_limit_cancel_order_post_serialize(
            order_id=order_id,
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertLimitCancelOrderPost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sapi_v1_convert_limit_cancel_order_post_serialize(
        self,
        order_id,
        timestamp,
        signature,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/sapi/v1/convert/limit/cancelOrder',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sapi_v1_convert_limit_place_order_post(
        self,
        base_asset: StrictStr,
        quote_asset: StrictStr,
        limit_price: Annotated[Union[StrictFloat, StrictInt], Field(description="Symbol limit price (from baseAsset to quoteAsset)")],
        side: StrictStr,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        base_amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Base asset amount. (One of baseAmount or quoteAmount is required)")] = None,
        quote_amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Quote asset amount. (One of baseAmount or quoteAmount is required)")] = None,
        wallet_type: Annotated[Optional[StrictStr], Field(description="SPOT or FUNDING or SPOT_FUNDING. It is to use which type of assets. Default is SPOT.")] = None,
        expired_type: Annotated[Optional[StrictStr], Field(description="1_D, 3_D, 7_D, 30_D (D means day)")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SapiV1ConvertLimitPlaceOrderPost200Response:
        """Place limit order (USER_DATA)

        Enable users to place a limit order  - baseAsset or quoteAsset can be determined via exchangeInfo endpoint. - Limit price is defined from baseAsset to quoteAsset. - Either baseAmount or quoteAmount is used.  Weight(UID): 500

        :param base_asset: (required)
        :type base_asset: str
        :param quote_asset: (required)
        :type quote_asset: str
        :param limit_price: Symbol limit price (from baseAsset to quoteAsset) (required)
        :type limit_price: float
        :param side: (required)
        :type side: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param base_amount: Base asset amount. (One of baseAmount or quoteAmount is required)
        :type base_amount: float
        :param quote_amount: Quote asset amount. (One of baseAmount or quoteAmount is required)
        :type quote_amount: float
        :param wallet_type: SPOT or FUNDING or SPOT_FUNDING. It is to use which type of assets. Default is SPOT.
        :type wallet_type: str
        :param expired_type: 1_D, 3_D, 7_D, 30_D (D means day)
        :type expired_type: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_limit_place_order_post_serialize(
            base_asset=base_asset,
            quote_asset=quote_asset,
            limit_price=limit_price,
            side=side,
            timestamp=timestamp,
            signature=signature,
            base_amount=base_amount,
            quote_amount=quote_amount,
            wallet_type=wallet_type,
            expired_type=expired_type,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertLimitPlaceOrderPost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sapi_v1_convert_limit_place_order_post_with_http_info(
        self,
        base_asset: StrictStr,
        quote_asset: StrictStr,
        limit_price: Annotated[Union[StrictFloat, StrictInt], Field(description="Symbol limit price (from baseAsset to quoteAsset)")],
        side: StrictStr,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        base_amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Base asset amount. (One of baseAmount or quoteAmount is required)")] = None,
        quote_amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Quote asset amount. (One of baseAmount or quoteAmount is required)")] = None,
        wallet_type: Annotated[Optional[StrictStr], Field(description="SPOT or FUNDING or SPOT_FUNDING. It is to use which type of assets. Default is SPOT.")] = None,
        expired_type: Annotated[Optional[StrictStr], Field(description="1_D, 3_D, 7_D, 30_D (D means day)")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SapiV1ConvertLimitPlaceOrderPost200Response]:
        """Place limit order (USER_DATA)

        Enable users to place a limit order  - baseAsset or quoteAsset can be determined via exchangeInfo endpoint. - Limit price is defined from baseAsset to quoteAsset. - Either baseAmount or quoteAmount is used.  Weight(UID): 500

        :param base_asset: (required)
        :type base_asset: str
        :param quote_asset: (required)
        :type quote_asset: str
        :param limit_price: Symbol limit price (from baseAsset to quoteAsset) (required)
        :type limit_price: float
        :param side: (required)
        :type side: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param base_amount: Base asset amount. (One of baseAmount or quoteAmount is required)
        :type base_amount: float
        :param quote_amount: Quote asset amount. (One of baseAmount or quoteAmount is required)
        :type quote_amount: float
        :param wallet_type: SPOT or FUNDING or SPOT_FUNDING. It is to use which type of assets. Default is SPOT.
        :type wallet_type: str
        :param expired_type: 1_D, 3_D, 7_D, 30_D (D means day)
        :type expired_type: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_limit_place_order_post_serialize(
            base_asset=base_asset,
            quote_asset=quote_asset,
            limit_price=limit_price,
            side=side,
            timestamp=timestamp,
            signature=signature,
            base_amount=base_amount,
            quote_amount=quote_amount,
            wallet_type=wallet_type,
            expired_type=expired_type,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertLimitPlaceOrderPost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sapi_v1_convert_limit_place_order_post_without_preload_content(
        self,
        base_asset: StrictStr,
        quote_asset: StrictStr,
        limit_price: Annotated[Union[StrictFloat, StrictInt], Field(description="Symbol limit price (from baseAsset to quoteAsset)")],
        side: StrictStr,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        base_amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Base asset amount. (One of baseAmount or quoteAmount is required)")] = None,
        quote_amount: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Quote asset amount. (One of baseAmount or quoteAmount is required)")] = None,
        wallet_type: Annotated[Optional[StrictStr], Field(description="SPOT or FUNDING or SPOT_FUNDING. It is to use which type of assets. Default is SPOT.")] = None,
        expired_type: Annotated[Optional[StrictStr], Field(description="1_D, 3_D, 7_D, 30_D (D means day)")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Place limit order (USER_DATA)

        Enable users to place a limit order  - baseAsset or quoteAsset can be determined via exchangeInfo endpoint. - Limit price is defined from baseAsset to quoteAsset. - Either baseAmount or quoteAmount is used.  Weight(UID): 500

        :param base_asset: (required)
        :type base_asset: str
        :param quote_asset: (required)
        :type quote_asset: str
        :param limit_price: Symbol limit price (from baseAsset to quoteAsset) (required)
        :type limit_price: float
        :param side: (required)
        :type side: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param base_amount: Base asset amount. (One of baseAmount or quoteAmount is required)
        :type base_amount: float
        :param quote_amount: Quote asset amount. (One of baseAmount or quoteAmount is required)
        :type quote_amount: float
        :param wallet_type: SPOT or FUNDING or SPOT_FUNDING. It is to use which type of assets. Default is SPOT.
        :type wallet_type: str
        :param expired_type: 1_D, 3_D, 7_D, 30_D (D means day)
        :type expired_type: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_limit_place_order_post_serialize(
            base_asset=base_asset,
            quote_asset=quote_asset,
            limit_price=limit_price,
            side=side,
            timestamp=timestamp,
            signature=signature,
            base_amount=base_amount,
            quote_amount=quote_amount,
            wallet_type=wallet_type,
            expired_type=expired_type,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertLimitPlaceOrderPost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sapi_v1_convert_limit_place_order_post_serialize(
        self,
        base_asset,
        quote_asset,
        limit_price,
        side,
        timestamp,
        signature,
        base_amount,
        quote_amount,
        wallet_type,
        expired_type,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if base_asset is not None:
            
            _query_params.append(('baseAsset', base_asset))
            
        if quote_asset is not None:
            
            _query_params.append(('quoteAsset', quote_asset))
            
        if limit_price is not None:
            
            _query_params.append(('limitPrice', limit_price))
            
        if base_amount is not None:
            
            _query_params.append(('baseAmount', base_amount))
            
        if quote_amount is not None:
            
            _query_params.append(('quoteAmount', quote_amount))
            
        if side is not None:
            
            _query_params.append(('side', side))
            
        if wallet_type is not None:
            
            _query_params.append(('walletType', wallet_type))
            
        if expired_type is not None:
            
            _query_params.append(('expiredType', expired_type))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/sapi/v1/convert/limit/placeOrder',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sapi_v1_convert_limit_query_open_orders_get(
        self,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SapiV1ConvertLimitQueryOpenOrdersGet200Response:
        """Query limit open orders (USER_DATA)

        Enable users to query for all existing limit orders  Weight(UID): 3000

        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_limit_query_open_orders_get_serialize(
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertLimitQueryOpenOrdersGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sapi_v1_convert_limit_query_open_orders_get_with_http_info(
        self,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SapiV1ConvertLimitQueryOpenOrdersGet200Response]:
        """Query limit open orders (USER_DATA)

        Enable users to query for all existing limit orders  Weight(UID): 3000

        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_limit_query_open_orders_get_serialize(
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertLimitQueryOpenOrdersGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sapi_v1_convert_limit_query_open_orders_get_without_preload_content(
        self,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Query limit open orders (USER_DATA)

        Enable users to query for all existing limit orders  Weight(UID): 3000

        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_limit_query_open_orders_get_serialize(
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertLimitQueryOpenOrdersGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sapi_v1_convert_limit_query_open_orders_get_serialize(
        self,
        timestamp,
        signature,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/convert/limit/queryOpenOrders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sapi_v1_convert_order_status_get(
        self,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        order_id: Optional[StrictStr] = None,
        quote_id: Optional[StrictStr] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SapiV1ConvertOrderStatusGet200Response:
        """Order status (USER_DATA)

        Query order status by order ID.  Weight(UID): 100

        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param order_id:
        :type order_id: str
        :param quote_id:
        :type quote_id: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_order_status_get_serialize(
            timestamp=timestamp,
            signature=signature,
            order_id=order_id,
            quote_id=quote_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertOrderStatusGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sapi_v1_convert_order_status_get_with_http_info(
        self,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        order_id: Optional[StrictStr] = None,
        quote_id: Optional[StrictStr] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SapiV1ConvertOrderStatusGet200Response]:
        """Order status (USER_DATA)

        Query order status by order ID.  Weight(UID): 100

        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param order_id:
        :type order_id: str
        :param quote_id:
        :type quote_id: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_order_status_get_serialize(
            timestamp=timestamp,
            signature=signature,
            order_id=order_id,
            quote_id=quote_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertOrderStatusGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sapi_v1_convert_order_status_get_without_preload_content(
        self,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        order_id: Optional[StrictStr] = None,
        quote_id: Optional[StrictStr] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Order status (USER_DATA)

        Query order status by order ID.  Weight(UID): 100

        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param order_id:
        :type order_id: str
        :param quote_id:
        :type quote_id: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_order_status_get_serialize(
            timestamp=timestamp,
            signature=signature,
            order_id=order_id,
            quote_id=quote_id,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertOrderStatusGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sapi_v1_convert_order_status_get_serialize(
        self,
        timestamp,
        signature,
        order_id,
        quote_id,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        if quote_id is not None:
            
            _query_params.append(('quoteId', quote_id))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/convert/orderStatus',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sapi_v1_convert_trade_flow_get(
        self,
        start_time: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        end_time: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        limit: Annotated[Optional[StrictInt], Field(description="default 100, max 1000")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SapiV1ConvertTradeFlowGet200Response:
        """Get Convert Trade History (USER_DATA)

        - The max interval between startTime and endTime is 30 days.  Weight(UID): 3000

        :param start_time: UTC timestamp in ms (required)
        :type start_time: int
        :param end_time: UTC timestamp in ms (required)
        :type end_time: int
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param limit: default 100, max 1000
        :type limit: int
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_trade_flow_get_serialize(
            start_time=start_time,
            end_time=end_time,
            timestamp=timestamp,
            signature=signature,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertTradeFlowGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sapi_v1_convert_trade_flow_get_with_http_info(
        self,
        start_time: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        end_time: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        limit: Annotated[Optional[StrictInt], Field(description="default 100, max 1000")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SapiV1ConvertTradeFlowGet200Response]:
        """Get Convert Trade History (USER_DATA)

        - The max interval between startTime and endTime is 30 days.  Weight(UID): 3000

        :param start_time: UTC timestamp in ms (required)
        :type start_time: int
        :param end_time: UTC timestamp in ms (required)
        :type end_time: int
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param limit: default 100, max 1000
        :type limit: int
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_trade_flow_get_serialize(
            start_time=start_time,
            end_time=end_time,
            timestamp=timestamp,
            signature=signature,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertTradeFlowGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sapi_v1_convert_trade_flow_get_without_preload_content(
        self,
        start_time: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        end_time: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        limit: Annotated[Optional[StrictInt], Field(description="default 100, max 1000")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Convert Trade History (USER_DATA)

        - The max interval between startTime and endTime is 30 days.  Weight(UID): 3000

        :param start_time: UTC timestamp in ms (required)
        :type start_time: int
        :param end_time: UTC timestamp in ms (required)
        :type end_time: int
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param limit: default 100, max 1000
        :type limit: int
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_convert_trade_flow_get_serialize(
            start_time=start_time,
            end_time=end_time,
            timestamp=timestamp,
            signature=signature,
            limit=limit,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1ConvertTradeFlowGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sapi_v1_convert_trade_flow_get_serialize(
        self,
        start_time,
        end_time,
        timestamp,
        signature,
        limit,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start_time is not None:
            
            _query_params.append(('startTime', start_time))
            
        if end_time is not None:
            
            _query_params.append(('endTime', end_time))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/convert/tradeFlow',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


