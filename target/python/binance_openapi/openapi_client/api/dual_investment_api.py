# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.sapi_v1_dci_product_accounts_get200_response import SapiV1DciProductAccountsGet200Response
from openapi_client.models.sapi_v1_dci_product_auto_compound_edit_status_post200_response import SapiV1DciProductAutoCompoundEditStatusPost200Response
from openapi_client.models.sapi_v1_dci_product_list_get200_response import SapiV1DciProductListGet200Response
from openapi_client.models.sapi_v1_dci_product_positions_get200_response import SapiV1DciProductPositionsGet200Response
from openapi_client.models.sapi_v1_dci_product_subscribe_post200_response import SapiV1DciProductSubscribePost200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DualInvestmentApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def sapi_v1_dci_product_accounts_get(
        self,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SapiV1DciProductAccountsGet200Response:
        """Check Dual Investment accounts(USER_DATA)

        Check Dual Investment accounts  Weight(IP): 1

        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_dci_product_accounts_get_serialize(
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1DciProductAccountsGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sapi_v1_dci_product_accounts_get_with_http_info(
        self,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SapiV1DciProductAccountsGet200Response]:
        """Check Dual Investment accounts(USER_DATA)

        Check Dual Investment accounts  Weight(IP): 1

        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_dci_product_accounts_get_serialize(
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1DciProductAccountsGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sapi_v1_dci_product_accounts_get_without_preload_content(
        self,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Check Dual Investment accounts(USER_DATA)

        Check Dual Investment accounts  Weight(IP): 1

        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_dci_product_accounts_get_serialize(
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1DciProductAccountsGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sapi_v1_dci_product_accounts_get_serialize(
        self,
        timestamp,
        signature,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/dci/product/accounts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sapi_v1_dci_product_auto_compound_edit_status_post(
        self,
        position_id: Annotated[StrictInt, Field(description="Get positionId from /sapi/v1/dci/product/positions")],
        auto_compound_plan: Annotated[StrictStr, Field(description="NONE: switch off the plan, STANDARD: standard plan, ADVANCED: advanced plan;")],
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SapiV1DciProductAutoCompoundEditStatusPost200Response:
        """Change Auto-Compound status(USER_DATA)

        Change Auto-Compound status  - 15:31 ~ 16:00 UTC+8 This function is disabled  Weight(IP): 1  Rate Limit: Maximum 1 time/s per account

        :param position_id: Get positionId from /sapi/v1/dci/product/positions (required)
        :type position_id: int
        :param auto_compound_plan: NONE: switch off the plan, STANDARD: standard plan, ADVANCED: advanced plan; (required)
        :type auto_compound_plan: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_dci_product_auto_compound_edit_status_post_serialize(
            position_id=position_id,
            auto_compound_plan=auto_compound_plan,
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1DciProductAutoCompoundEditStatusPost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sapi_v1_dci_product_auto_compound_edit_status_post_with_http_info(
        self,
        position_id: Annotated[StrictInt, Field(description="Get positionId from /sapi/v1/dci/product/positions")],
        auto_compound_plan: Annotated[StrictStr, Field(description="NONE: switch off the plan, STANDARD: standard plan, ADVANCED: advanced plan;")],
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SapiV1DciProductAutoCompoundEditStatusPost200Response]:
        """Change Auto-Compound status(USER_DATA)

        Change Auto-Compound status  - 15:31 ~ 16:00 UTC+8 This function is disabled  Weight(IP): 1  Rate Limit: Maximum 1 time/s per account

        :param position_id: Get positionId from /sapi/v1/dci/product/positions (required)
        :type position_id: int
        :param auto_compound_plan: NONE: switch off the plan, STANDARD: standard plan, ADVANCED: advanced plan; (required)
        :type auto_compound_plan: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_dci_product_auto_compound_edit_status_post_serialize(
            position_id=position_id,
            auto_compound_plan=auto_compound_plan,
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1DciProductAutoCompoundEditStatusPost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sapi_v1_dci_product_auto_compound_edit_status_post_without_preload_content(
        self,
        position_id: Annotated[StrictInt, Field(description="Get positionId from /sapi/v1/dci/product/positions")],
        auto_compound_plan: Annotated[StrictStr, Field(description="NONE: switch off the plan, STANDARD: standard plan, ADVANCED: advanced plan;")],
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Change Auto-Compound status(USER_DATA)

        Change Auto-Compound status  - 15:31 ~ 16:00 UTC+8 This function is disabled  Weight(IP): 1  Rate Limit: Maximum 1 time/s per account

        :param position_id: Get positionId from /sapi/v1/dci/product/positions (required)
        :type position_id: int
        :param auto_compound_plan: NONE: switch off the plan, STANDARD: standard plan, ADVANCED: advanced plan; (required)
        :type auto_compound_plan: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_dci_product_auto_compound_edit_status_post_serialize(
            position_id=position_id,
            auto_compound_plan=auto_compound_plan,
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1DciProductAutoCompoundEditStatusPost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sapi_v1_dci_product_auto_compound_edit_status_post_serialize(
        self,
        position_id,
        auto_compound_plan,
        timestamp,
        signature,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if position_id is not None:
            
            _query_params.append(('positionId', position_id))
            
        if auto_compound_plan is not None:
            
            _query_params.append(('autoCompoundPlan', auto_compound_plan))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/sapi/v1/dci/product/auto_compound/edit-status',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sapi_v1_dci_product_list_get(
        self,
        option_type: Annotated[StrictStr, Field(description="Input CALL or PUT")],
        exercised_coin: Annotated[StrictStr, Field(description="Target exercised asset, e.g.:  if you subscribe to a high sell product (call option), you should input:    - optionType: CALL,   - exercisedCoin: USDT,   - investCoin: BNB;   if you subscribe to a low buy product (put option), you should input:   - optionType: PUT,   - exercisedCoin: BNB,   - investCoin: USDT;")],
        invest_coin: Annotated[StrictStr, Field(description="Asset used for subscribing, e.g.:  if you subscribe to a high sell product (call option), you should input:    - optionType: CALL,   - exercisedCoin: USDT,   - investCoin: BNB;   if you subscribe to a low buy product (put option), you should input:   - optionType: PUT,   - exercisedCoin: BNB,   - investCoin: USDT;")],
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        page_size: Annotated[Optional[StrictStr], Field(description="MIN 1, MAX 100; Default 100")] = None,
        page_index: Annotated[Optional[StrictInt], Field(description="Page number, default is first page, start form 1")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SapiV1DciProductListGet200Response:
        """Get Dual Investment product list(USER_DATA)

        Get Dual Investment product list  Weight(IP): 1

        :param option_type: Input CALL or PUT (required)
        :type option_type: str
        :param exercised_coin: Target exercised asset, e.g.:  if you subscribe to a high sell product (call option), you should input:    - optionType: CALL,   - exercisedCoin: USDT,   - investCoin: BNB;   if you subscribe to a low buy product (put option), you should input:   - optionType: PUT,   - exercisedCoin: BNB,   - investCoin: USDT; (required)
        :type exercised_coin: str
        :param invest_coin: Asset used for subscribing, e.g.:  if you subscribe to a high sell product (call option), you should input:    - optionType: CALL,   - exercisedCoin: USDT,   - investCoin: BNB;   if you subscribe to a low buy product (put option), you should input:   - optionType: PUT,   - exercisedCoin: BNB,   - investCoin: USDT; (required)
        :type invest_coin: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param page_size: MIN 1, MAX 100; Default 100
        :type page_size: str
        :param page_index: Page number, default is first page, start form 1
        :type page_index: int
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_dci_product_list_get_serialize(
            option_type=option_type,
            exercised_coin=exercised_coin,
            invest_coin=invest_coin,
            timestamp=timestamp,
            signature=signature,
            page_size=page_size,
            page_index=page_index,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1DciProductListGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sapi_v1_dci_product_list_get_with_http_info(
        self,
        option_type: Annotated[StrictStr, Field(description="Input CALL or PUT")],
        exercised_coin: Annotated[StrictStr, Field(description="Target exercised asset, e.g.:  if you subscribe to a high sell product (call option), you should input:    - optionType: CALL,   - exercisedCoin: USDT,   - investCoin: BNB;   if you subscribe to a low buy product (put option), you should input:   - optionType: PUT,   - exercisedCoin: BNB,   - investCoin: USDT;")],
        invest_coin: Annotated[StrictStr, Field(description="Asset used for subscribing, e.g.:  if you subscribe to a high sell product (call option), you should input:    - optionType: CALL,   - exercisedCoin: USDT,   - investCoin: BNB;   if you subscribe to a low buy product (put option), you should input:   - optionType: PUT,   - exercisedCoin: BNB,   - investCoin: USDT;")],
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        page_size: Annotated[Optional[StrictStr], Field(description="MIN 1, MAX 100; Default 100")] = None,
        page_index: Annotated[Optional[StrictInt], Field(description="Page number, default is first page, start form 1")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SapiV1DciProductListGet200Response]:
        """Get Dual Investment product list(USER_DATA)

        Get Dual Investment product list  Weight(IP): 1

        :param option_type: Input CALL or PUT (required)
        :type option_type: str
        :param exercised_coin: Target exercised asset, e.g.:  if you subscribe to a high sell product (call option), you should input:    - optionType: CALL,   - exercisedCoin: USDT,   - investCoin: BNB;   if you subscribe to a low buy product (put option), you should input:   - optionType: PUT,   - exercisedCoin: BNB,   - investCoin: USDT; (required)
        :type exercised_coin: str
        :param invest_coin: Asset used for subscribing, e.g.:  if you subscribe to a high sell product (call option), you should input:    - optionType: CALL,   - exercisedCoin: USDT,   - investCoin: BNB;   if you subscribe to a low buy product (put option), you should input:   - optionType: PUT,   - exercisedCoin: BNB,   - investCoin: USDT; (required)
        :type invest_coin: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param page_size: MIN 1, MAX 100; Default 100
        :type page_size: str
        :param page_index: Page number, default is first page, start form 1
        :type page_index: int
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_dci_product_list_get_serialize(
            option_type=option_type,
            exercised_coin=exercised_coin,
            invest_coin=invest_coin,
            timestamp=timestamp,
            signature=signature,
            page_size=page_size,
            page_index=page_index,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1DciProductListGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sapi_v1_dci_product_list_get_without_preload_content(
        self,
        option_type: Annotated[StrictStr, Field(description="Input CALL or PUT")],
        exercised_coin: Annotated[StrictStr, Field(description="Target exercised asset, e.g.:  if you subscribe to a high sell product (call option), you should input:    - optionType: CALL,   - exercisedCoin: USDT,   - investCoin: BNB;   if you subscribe to a low buy product (put option), you should input:   - optionType: PUT,   - exercisedCoin: BNB,   - investCoin: USDT;")],
        invest_coin: Annotated[StrictStr, Field(description="Asset used for subscribing, e.g.:  if you subscribe to a high sell product (call option), you should input:    - optionType: CALL,   - exercisedCoin: USDT,   - investCoin: BNB;   if you subscribe to a low buy product (put option), you should input:   - optionType: PUT,   - exercisedCoin: BNB,   - investCoin: USDT;")],
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        page_size: Annotated[Optional[StrictStr], Field(description="MIN 1, MAX 100; Default 100")] = None,
        page_index: Annotated[Optional[StrictInt], Field(description="Page number, default is first page, start form 1")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Dual Investment product list(USER_DATA)

        Get Dual Investment product list  Weight(IP): 1

        :param option_type: Input CALL or PUT (required)
        :type option_type: str
        :param exercised_coin: Target exercised asset, e.g.:  if you subscribe to a high sell product (call option), you should input:    - optionType: CALL,   - exercisedCoin: USDT,   - investCoin: BNB;   if you subscribe to a low buy product (put option), you should input:   - optionType: PUT,   - exercisedCoin: BNB,   - investCoin: USDT; (required)
        :type exercised_coin: str
        :param invest_coin: Asset used for subscribing, e.g.:  if you subscribe to a high sell product (call option), you should input:    - optionType: CALL,   - exercisedCoin: USDT,   - investCoin: BNB;   if you subscribe to a low buy product (put option), you should input:   - optionType: PUT,   - exercisedCoin: BNB,   - investCoin: USDT; (required)
        :type invest_coin: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param page_size: MIN 1, MAX 100; Default 100
        :type page_size: str
        :param page_index: Page number, default is first page, start form 1
        :type page_index: int
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_dci_product_list_get_serialize(
            option_type=option_type,
            exercised_coin=exercised_coin,
            invest_coin=invest_coin,
            timestamp=timestamp,
            signature=signature,
            page_size=page_size,
            page_index=page_index,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1DciProductListGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sapi_v1_dci_product_list_get_serialize(
        self,
        option_type,
        exercised_coin,
        invest_coin,
        timestamp,
        signature,
        page_size,
        page_index,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if option_type is not None:
            
            _query_params.append(('optionType', option_type))
            
        if exercised_coin is not None:
            
            _query_params.append(('exercisedCoin', exercised_coin))
            
        if invest_coin is not None:
            
            _query_params.append(('investCoin', invest_coin))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_index is not None:
            
            _query_params.append(('pageIndex', page_index))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/dci/product/list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sapi_v1_dci_product_positions_get(
        self,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        status: Annotated[Optional[StrictStr], Field(description="- PENDING: Products are purchasing, will give results later; - PURCHASE_SUCCESS: purchase successfully; - SETTLED: Products are finish settling; - PURCHASE_FAIL: fail to purchase; - REFUNDING: refund ongoing; - REFUND_SUCCESS: refund to spot account successfully; - SETTLING: Products are settling.  If don't fill this field, will response all the position status.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="MIN 1, MAX 100; Default 100")] = None,
        page_index: Annotated[Optional[StrictInt], Field(description="Page number, default is first page, start form 1")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SapiV1DciProductPositionsGet200Response:
        """Get Dual Investment positions(USER_DATA)

        Get Dual Investment positions (batch)  Weight(IP): 1

        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param status: - PENDING: Products are purchasing, will give results later; - PURCHASE_SUCCESS: purchase successfully; - SETTLED: Products are finish settling; - PURCHASE_FAIL: fail to purchase; - REFUNDING: refund ongoing; - REFUND_SUCCESS: refund to spot account successfully; - SETTLING: Products are settling.  If don't fill this field, will response all the position status.
        :type status: str
        :param page_size: MIN 1, MAX 100; Default 100
        :type page_size: str
        :param page_index: Page number, default is first page, start form 1
        :type page_index: int
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_dci_product_positions_get_serialize(
            timestamp=timestamp,
            signature=signature,
            status=status,
            page_size=page_size,
            page_index=page_index,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1DciProductPositionsGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sapi_v1_dci_product_positions_get_with_http_info(
        self,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        status: Annotated[Optional[StrictStr], Field(description="- PENDING: Products are purchasing, will give results later; - PURCHASE_SUCCESS: purchase successfully; - SETTLED: Products are finish settling; - PURCHASE_FAIL: fail to purchase; - REFUNDING: refund ongoing; - REFUND_SUCCESS: refund to spot account successfully; - SETTLING: Products are settling.  If don't fill this field, will response all the position status.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="MIN 1, MAX 100; Default 100")] = None,
        page_index: Annotated[Optional[StrictInt], Field(description="Page number, default is first page, start form 1")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SapiV1DciProductPositionsGet200Response]:
        """Get Dual Investment positions(USER_DATA)

        Get Dual Investment positions (batch)  Weight(IP): 1

        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param status: - PENDING: Products are purchasing, will give results later; - PURCHASE_SUCCESS: purchase successfully; - SETTLED: Products are finish settling; - PURCHASE_FAIL: fail to purchase; - REFUNDING: refund ongoing; - REFUND_SUCCESS: refund to spot account successfully; - SETTLING: Products are settling.  If don't fill this field, will response all the position status.
        :type status: str
        :param page_size: MIN 1, MAX 100; Default 100
        :type page_size: str
        :param page_index: Page number, default is first page, start form 1
        :type page_index: int
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_dci_product_positions_get_serialize(
            timestamp=timestamp,
            signature=signature,
            status=status,
            page_size=page_size,
            page_index=page_index,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1DciProductPositionsGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sapi_v1_dci_product_positions_get_without_preload_content(
        self,
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        status: Annotated[Optional[StrictStr], Field(description="- PENDING: Products are purchasing, will give results later; - PURCHASE_SUCCESS: purchase successfully; - SETTLED: Products are finish settling; - PURCHASE_FAIL: fail to purchase; - REFUNDING: refund ongoing; - REFUND_SUCCESS: refund to spot account successfully; - SETTLING: Products are settling.  If don't fill this field, will response all the position status.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="MIN 1, MAX 100; Default 100")] = None,
        page_index: Annotated[Optional[StrictInt], Field(description="Page number, default is first page, start form 1")] = None,
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Dual Investment positions(USER_DATA)

        Get Dual Investment positions (batch)  Weight(IP): 1

        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param status: - PENDING: Products are purchasing, will give results later; - PURCHASE_SUCCESS: purchase successfully; - SETTLED: Products are finish settling; - PURCHASE_FAIL: fail to purchase; - REFUNDING: refund ongoing; - REFUND_SUCCESS: refund to spot account successfully; - SETTLING: Products are settling.  If don't fill this field, will response all the position status.
        :type status: str
        :param page_size: MIN 1, MAX 100; Default 100
        :type page_size: str
        :param page_index: Page number, default is first page, start form 1
        :type page_index: int
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_dci_product_positions_get_serialize(
            timestamp=timestamp,
            signature=signature,
            status=status,
            page_size=page_size,
            page_index=page_index,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1DciProductPositionsGet200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sapi_v1_dci_product_positions_get_serialize(
        self,
        timestamp,
        signature,
        status,
        page_size,
        page_index,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if status is not None:
            
            _query_params.append(('status', status))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_index is not None:
            
            _query_params.append(('pageIndex', page_index))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/sapi/v1/dci/product/positions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def sapi_v1_dci_product_subscribe_post(
        self,
        id: Annotated[StrictStr, Field(description="get id from /sapi/v1/dci/product/list")],
        order_id: Annotated[StrictStr, Field(description="get orderId from /sapi/v1/dci/product/list")],
        deposit_amount: Union[StrictFloat, StrictInt],
        auto_compound_plan: Annotated[StrictStr, Field(description="NONE: switch off the plan, STANDARD: standard plan, ADVANCED: advanced plan;")],
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SapiV1DciProductSubscribePost200Response:
        """Subscribe Dual Investment products(USER_DATA)

        Subscribe Dual Investment products  - `Products are not available.` means that the APR changes to lower value, or the orders are not available. - `Failed` is a system or network errors.  Weight(IP): 1

        :param id: get id from /sapi/v1/dci/product/list (required)
        :type id: str
        :param order_id: get orderId from /sapi/v1/dci/product/list (required)
        :type order_id: str
        :param deposit_amount: (required)
        :type deposit_amount: float
        :param auto_compound_plan: NONE: switch off the plan, STANDARD: standard plan, ADVANCED: advanced plan; (required)
        :type auto_compound_plan: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_dci_product_subscribe_post_serialize(
            id=id,
            order_id=order_id,
            deposit_amount=deposit_amount,
            auto_compound_plan=auto_compound_plan,
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1DciProductSubscribePost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def sapi_v1_dci_product_subscribe_post_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="get id from /sapi/v1/dci/product/list")],
        order_id: Annotated[StrictStr, Field(description="get orderId from /sapi/v1/dci/product/list")],
        deposit_amount: Union[StrictFloat, StrictInt],
        auto_compound_plan: Annotated[StrictStr, Field(description="NONE: switch off the plan, STANDARD: standard plan, ADVANCED: advanced plan;")],
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SapiV1DciProductSubscribePost200Response]:
        """Subscribe Dual Investment products(USER_DATA)

        Subscribe Dual Investment products  - `Products are not available.` means that the APR changes to lower value, or the orders are not available. - `Failed` is a system or network errors.  Weight(IP): 1

        :param id: get id from /sapi/v1/dci/product/list (required)
        :type id: str
        :param order_id: get orderId from /sapi/v1/dci/product/list (required)
        :type order_id: str
        :param deposit_amount: (required)
        :type deposit_amount: float
        :param auto_compound_plan: NONE: switch off the plan, STANDARD: standard plan, ADVANCED: advanced plan; (required)
        :type auto_compound_plan: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_dci_product_subscribe_post_serialize(
            id=id,
            order_id=order_id,
            deposit_amount=deposit_amount,
            auto_compound_plan=auto_compound_plan,
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1DciProductSubscribePost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def sapi_v1_dci_product_subscribe_post_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="get id from /sapi/v1/dci/product/list")],
        order_id: Annotated[StrictStr, Field(description="get orderId from /sapi/v1/dci/product/list")],
        deposit_amount: Union[StrictFloat, StrictInt],
        auto_compound_plan: Annotated[StrictStr, Field(description="NONE: switch off the plan, STANDARD: standard plan, ADVANCED: advanced plan;")],
        timestamp: Annotated[StrictInt, Field(description="UTC timestamp in ms")],
        signature: Annotated[StrictStr, Field(description="Signature")],
        recv_window: Annotated[Optional[StrictInt], Field(description="The value cannot be greater than 60000")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Subscribe Dual Investment products(USER_DATA)

        Subscribe Dual Investment products  - `Products are not available.` means that the APR changes to lower value, or the orders are not available. - `Failed` is a system or network errors.  Weight(IP): 1

        :param id: get id from /sapi/v1/dci/product/list (required)
        :type id: str
        :param order_id: get orderId from /sapi/v1/dci/product/list (required)
        :type order_id: str
        :param deposit_amount: (required)
        :type deposit_amount: float
        :param auto_compound_plan: NONE: switch off the plan, STANDARD: standard plan, ADVANCED: advanced plan; (required)
        :type auto_compound_plan: str
        :param timestamp: UTC timestamp in ms (required)
        :type timestamp: int
        :param signature: Signature (required)
        :type signature: str
        :param recv_window: The value cannot be greater than 60000
        :type recv_window: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._sapi_v1_dci_product_subscribe_post_serialize(
            id=id,
            order_id=order_id,
            deposit_amount=deposit_amount,
            auto_compound_plan=auto_compound_plan,
            timestamp=timestamp,
            signature=signature,
            recv_window=recv_window,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SapiV1DciProductSubscribePost200Response",
            '400': "Error",
            '401': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _sapi_v1_dci_product_subscribe_post_serialize(
        self,
        id,
        order_id,
        deposit_amount,
        auto_compound_plan,
        timestamp,
        signature,
        recv_window,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if order_id is not None:
            
            _query_params.append(('orderId', order_id))
            
        if deposit_amount is not None:
            
            _query_params.append(('depositAmount', deposit_amount))
            
        if auto_compound_plan is not None:
            
            _query_params.append(('autoCompoundPlan', auto_compound_plan))
            
        if recv_window is not None:
            
            _query_params.append(('recvWindow', recv_window))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if signature is not None:
            
            _query_params.append(('signature', signature))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/sapi/v1/dci/product/subscribe',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


