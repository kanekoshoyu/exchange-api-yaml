# coding: utf-8

"""
    Coinbase API

    The Coinbase v2 API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.money_hash import MoneyHash
from typing import Optional, Set
from typing_extensions import Self

class Transaction(BaseModel):
    """
    Transaction
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Resource ID")
    type: Optional[StrictStr] = Field(default=None, description="Transaction type")
    status: Optional[StrictStr] = Field(default=None, description="Status")
    amount: Optional[MoneyHash] = None
    native_amount: Optional[MoneyHash] = None
    instant_exchange: Optional[StrictBool] = Field(default=None, description="Indicator if the transaction was instant exchanged (received into a bitcoin address for a fiat account)")
    created_at: Optional[StrictStr] = Field(default=None, description="Timestamp indicating when was the address was created.")
    updated_at: Optional[StrictStr] = Field(default=None, description="Timestamp indicating when was the address last updated.")
    resource: Optional[StrictStr] = Field(default=None, description="This value is always 'address'.")
    var_resource_path: Optional[StrictStr] = Field(default=None, alias="resource_path")
    details: Optional[Dict[str, Any]] = Field(default=None, description="Detailed information about the transaction")
    __properties: ClassVar[List[str]] = ["id", "type", "status", "amount", "native_amount", "instant_exchange", "created_at", "updated_at", "resource", "resource_path", "details"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of native_amount
        if self.native_amount:
            _dict['native_amount'] = self.native_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "amount": MoneyHash.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "native_amount": MoneyHash.from_dict(obj["native_amount"]) if obj.get("native_amount") is not None else None,
            "instant_exchange": obj.get("instant_exchange"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "resource": obj.get("resource"),
            "resource_path": obj.get("resource_path"),
            "details": obj.get("details")
        })
        return _obj


